@page "/reportes-admin"
@using System.Net.Http.Json
@using Proyecto.Backend.Domain.Entities.Models
@using Proyecto.Shared.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject IJSRuntime JS

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido, @usuario.NombreCompleto (Administrador)</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio-admin" class="nav-item"><i class="bi bi-house-fill"></i> Inicio</NavLink>
        <NavLink href="/adminPostulaciones" class="nav-item"><i class="bi bi-clipboard-check-fill"></i> Ver Postulantes</NavLink>
        <NavLink href="/reportes-admin" class="nav-item"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion"><i class="bi bi-box-arrow-right"></i> Cerrar Sesión</NavLink>
    </nav>
</header>

<main class="contenido">
    <div class="reportes-admin">
        <h1>Generador de Reportes</h1>

        <section>
            <div class="filtros">
                <div class="filtro">
                    <label for="reportType">Tipo de Reporte:</label>
                    <select id="reportType" @bind="SelectedReportType">
                        <option value="">Seleccione un tipo</option>
                        @foreach (var type in ReportTypes)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                <div class="filtro">
                    <label for="cedulaDocente">Cédula del Docente:</label>
                    <input type="text" id="cedulaDocente" @bind="CedulaDocente" placeholder="Ingrese cédula del docente" />
                </div>
                @if (SelectedReportType == "Evaluaciones Docentes")
                {
                    <div class="filtro">
                        <label for="periodo">Período:</label>
                        <input type="text" id="periodo" @bind="SelectedPeriod" placeholder="Ej. 2024-1" />
                    </div>
                }
            </div>

            <div class="acciones">
                <button @onclick="GenerateReport" disabled="@(!ValidarFiltros())">Generar Reporte</button>
            </div>
        </section>

        <section class="resultados">
            <h2>Resultados del Reporte</h2>

            @if (IsLoading)
            {
                <p>Cargando...</p>
            }
            else if (ReportResults.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>Docente</th>
                            <th>Tipo</th>
                            <th>Detalle</th>
                            <th>Fecha</th>
                            <th>Valor/Puntaje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in ReportResults)
                        {
                            <tr>
                                <td>@result.Docente</td>
                                <td>@result.Tipo</td>
                                <td>@result.Detalle</td>
                                <td>@result.Fecha.ToString("yyyy-MM-dd")</td>
                                <td>@result.ValorPuntaje</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="exportar">
                    <button @onclick="ExportToPdf">📥 Exportar a PDF</button>
                </div>
            }
            else
            {
                <p>No hay resultados para mostrar. Ajusta los filtros.</p>
            }
        </section>
    </div>
</main>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Acerca del Sistema</h4>
            <p>Módulo administrativo del Sistema de Promoción Docente FISEI.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Soporte Técnico</h4>
            <p>admin@fisei.edu.ec<br />+593 98 765 4321</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Accesos Rápidos</h4>
            <NavLink href="/verificar"><i class="bi bi-clipboard-check-fill"></i> Verificación</NavLink><br />
            <NavLink href="/reportes-admin"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink><br />
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>

@code {
    private UsuarioModel usuario = new();
    private string SelectedReportType { get; set; } = string.Empty;
    private string CedulaDocente { get; set; } = string.Empty;
    private string SelectedPeriod { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;

    private List<string> ReportTypes { get; set; } = new()
    {
        "Evaluaciones Docentes",
        "Capacitaciones por Docente",
        "Obras por Docente",
        "Investigaciones por Docente",
        "Roles y Antigüedad"
    };

    private List<ReporteResultado> ReportResults { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
            if (!string.IsNullOrWhiteSpace(cedula))
            {
                var response = await Http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/porCedula/{cedula}");
                if (response != null)
                    usuario = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el usuario: {ex.Message}");
        }
    }

    private bool ValidarFiltros()
    {
        if (string.IsNullOrWhiteSpace(SelectedReportType) || string.IsNullOrWhiteSpace(CedulaDocente))
            return false;
        if (SelectedReportType == "Evaluaciones Docentes" && string.IsNullOrWhiteSpace(SelectedPeriod))
            return false;
        return true;
    }

    private async Task GenerateReport()
    {
        IsLoading = true;
        ReportResults.Clear();
        try
        {
            switch (SelectedReportType)
            {
                case "Evaluaciones Docentes":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Evaluaciones/{CedulaDocente}/{SelectedPeriod}");
                    break;
                case "Capacitaciones por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Capacitaciones/{CedulaDocente}");
                    break;
                case "Obras por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Obras/{CedulaDocente}");
                    break;
                case "Investigaciones por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Investigaciones/{CedulaDocente}");
                    break;
                case "Roles y Antigüedad":
                    var rol = await Http.GetFromJsonAsync<RolAntiguedad>($"api/Reportes/RolYAntiguedad/{CedulaDocente}");
                    if (rol != null)
                    {
                        ReportResults.Add(new ReporteResultado
                            {
                                Docente = rol.Nombre,
                                Tipo = "Rol y Antigüedad",
                                Detalle = rol.Rol,
                                Fecha = DateTime.Now,
                                ValorPuntaje = $"Antigüedad: {rol.Antiguedad} años"
                            });
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al obtener datos: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
        StateHasChanged();
    }

    private async Task ExportToPdf()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    public class ReporteResultado
    {
        public string Docente { get; set; } = string.Empty;
        public string Tipo { get; set; } = string.Empty;
        public string Detalle { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public string ValorPuntaje { get; set; } = string.Empty;
    }

    public class RolAntiguedad
    {
        public string Cedula { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Rol { get; set; } = string.Empty;
        public int Antiguedad { get; set; }
    }
}
