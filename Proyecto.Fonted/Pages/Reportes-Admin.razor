@page "/reportes-admin"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS


<Header_Admin />

<main class="contenido">
    <div class="reportes-admin">

        <!-- Navegación de Tabs -->
        <nav class="tabs">
            <button class="@GetTabClass("reportes")" @onclick="@(() => CambiarTab("reportes"))">📊 Reportes</button>
            <button class="@GetTabClass("postulantes")" @onclick="@(() => CambiarTab("postulantes"))">📋 Postulantes</button>

        </nav>

        @if (TabSeleccionado == "reportes")
        {
            <h1>Generador de Reportes</h1>
            <section>

        <div class="filtros">
            <div class="filtro">
                <label for="reportType">Tipo de Reporte:</label>
                <select id="reportType" @bind="SelectedReportType">
                    <option value="">Seleccione un tipo</option>
                    @foreach (var type in ReportTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
            <div class="filtro">
                <label for="cedulaDocente">Cédula del Docente:</label>
                <input type="text" id="cedulaDocente" @bind="CedulaDocente" placeholder="Ingrese cédula del docente" />
            </div>
            <div class="filtro">
                <label for="periodo">Período:</label>
                <input type="text" id="periodo" @bind="SelectedPeriod" placeholder="Ingrese período (ej. 2024-1)" />
            </div>
            <div class="filtro">
                <label for="fechaInicio">Fecha Inicio:</label>
                <input type="date" id="fechaInicio" @bind="FechaInicio" />
            </div>
            <div class="filtro">
                <label for="fechaFin">Fecha Fin:</label>
                <input type="date" id="fechaFin" @bind="FechaFin" />
            </div>
            <div class="filtro">
                <label for="facultad">Facultad:</label>
                <select id="facultad" @bind="SelectedFacultad">
                    <option value="">Seleccione una facultad</option>
                    @foreach (var facultad in Facultades)
                    {
                        <option value="@facultad">@facultad</option>
                    }
                </select>
            </div>
            <div class="filtro">
                <label for="carrera">Carrera:</label>
                <select id="carrera" @bind="SelectedCarrera">
                    <option value="">Seleccione una carrera</option>
                    @foreach (var carrera in Carreras)
                    {
                        <option value="@carrera">@carrera</option>
                    }
                </select>
            </div>
        </div>

        <div class="acciones">
            <button @onclick="GenerateReport">Generar Reporte</button>
        </div>
            </section>
            <!-- Resultados -->
            <section class="resultados">
                <h2>Resultados del Reporte</h2>
                @if (ReportResults.Any())
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Docente</th>
                                <th>Tipo</th>
                                <th>Detalle</th>
                                <th>Fecha</th>
                                <th>Valor/Puntaje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in ReportResults)
                            {
                                <tr>
                                    <td>@result.Docente</td>
                                    <td>@result.Tipo</td>
                                    <td>@result.Detalle</td>
                                    <td>@result.Fecha.ToString("yyyy-MM-dd")</td>
                                    <td>@result.ValorPuntaje</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="exportar">
                        <button @onclick="ExportToPdf">📥 Exportar a PDF</button>
                    </div>
                }
                else
                {
                    <p>No hay resultados para mostrar. Ajusta los filtros.</p>
                }
            </section>
        }

        @if (TabSeleccionado == "postulantes")
        {
            <h1>Gestión de Postulantes</h1>

            <!-- Tabla de Postulantes -->
            <section class="postulantes">
                <table>
                    <thead>
                        <tr>
                            <th>Cédula</th>
                            <th>Nombre</th>
                            <th>Facultad</th>
                            <th>Carrera</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var docente in DocentesPostulantes)
                        {
                            <tr>
                                <td>
                                    <button class="link-button" @onclick="() => VerDetalles(docente.Cedula)">
                                        @docente.Cedula
                                    </button>
                                </td>
                                <td>@docente.NombreCompleto</td>
                                <td>@docente.Facultad</td>
                                <td>@docente.Carrera</td>
                                <td><span class="@GetEstadoColor(docente.EstadoPostulacion)">@docente.EstadoPostulacion</span></td>
                                <td>
                                    <button @onclick="() => ExportResumenPdf(docente.Cedula)">📄 Resumen</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </section>
        }

        <!-- Modal -->
        @if (MostrarModal && DocenteSeleccionado != null)
        {
            <div class="modal-backdrop" @onclick="() => MostrarModal = false"></div>
            <div class="modal-detalle">
                <h3>Detalle del Docente</h3>
                <p><strong>Cédula:</strong> @DocenteSeleccionado.Cedula</p>
                <p><strong>Nombre:</strong> @DocenteSeleccionado.NombreCompleto</p>
                <p><strong>Facultad:</strong> @DocenteSeleccionado.Facultad</p>
                <p><strong>Carrera:</strong> @DocenteSeleccionado.Carrera</p>
                <p><strong>Estado:</strong> @DocenteSeleccionado.EstadoPostulacion</p>

                <div class="modal-acciones">
                    <button @onclick="AceptarPostulacion" class="btn-aceptar">✅ Aceptar</button>
                    <button @onclick="RechazarPostulacion" class="btn-rechazar">❌ Rechazar</button>
                </div>
            </div>
        }
    </div>
</main>

<Footer_Admin />


@code {
    private string SelectedReportType { get; set; } = string.Empty;
    private string CedulaDocente { get; set; } = string.Empty;
    private string SelectedPeriod { get; set; } = string.Empty;
    private DateTime? FechaInicio { get; set; }
    private DateTime? FechaFin { get; set; }
    private string SelectedFacultad { get; set; } = string.Empty;
    private string SelectedCarrera { get; set; } = string.Empty;

    private List<string> ReportTypes { get; set; } = new()
    {
        "Evaluaciones Docentes",
        "Capacitaciones por Docente",
        "Obras por Docente",
        "Investigaciones por Docente",
        "Roles y Antigüedad"
    };


    private string TabSeleccionado = "reportes";

    private void CambiarTab(string tab)
    {
        TabSeleccionado = tab;
    }

    private string GetTabClass(string tab) =>
        TabSeleccionado == tab ? "tab-active" : "";


    private List<string> Facultades { get; set; } = new()
    {
        "Facultad de Ciencias de la Computación",
        "Facultad de Ingeniería Civil",
        "Facultad de Ciencias Administrativas"
    };

    private List<string> Carreras { get; set; } = new()
    {
        "Ingeniería de Software",
        "Ingeniería de Sistemas",
        "Ingeniería Industrial",
        "Arquitectura"
    };

    private List<DocentePostulanteModel> DocentesPostulantes = new()
    {
        new() { Cedula = "0102030405", NombreCompleto = "Juan Pérez", Facultad = "FCC", Carrera = "Software", EstadoPostulacion = "EN ESPERA" },
        new() { Cedula = "0607080910", NombreCompleto = "María García", Facultad = "FICA", Carrera = "Civil", EstadoPostulacion = "EN ESPERA" }
    };

    private DocentePostulanteModel? DocenteSeleccionado;
    private bool MostrarModal = false;

    private void VerDetalles(string cedula)
    {
        DocenteSeleccionado = DocentesPostulantes.FirstOrDefault(d => d.Cedula == cedula);
        MostrarModal = true;
    }

    private async void AceptarPostulacion()
    {
        if (DocenteSeleccionado != null)
            DocenteSeleccionado.EstadoPostulacion = "ACEPTADO";

        MostrarModal = false;
        await JS.InvokeVoidAsync("alert", "Postulación aceptada.");
    }

    private async void RechazarPostulacion()
    {
        if (DocenteSeleccionado != null)
            DocenteSeleccionado.EstadoPostulacion = "RECHAZADO";

        MostrarModal = false;
        await JS.InvokeVoidAsync("alert", "Postulación rechazada.");
    }

    private string GetEstadoColor(string estado) => estado switch
    {
        "ACEPTADO" => "estado-aceptado",
        "RECHAZADO" => "estado-rechazado",
        _ => "estado-espera"
    };

    private async Task GenerateReport()
    {
        ReportResults = new List<ReporteResultado>
        {
            new() { Docente = "Juan Pérez", Tipo = "Evaluación Docente", Detalle = "Período 2024-1", Fecha = new DateTime(2024, 6, 15), ValorPuntaje = "92.50" },
            new() { Docente = "María García", Tipo = "Obra", Detalle = "Artículo 'IA en Educación'", Fecha = new DateTime(2023, 11, 1), ValorPuntaje = "N/A" }
        };
        await InvokeAsync(StateHasChanged);
    }

    private async Task ExportToPdf()
    {
        await JS.InvokeVoidAsync("alert", "Exportando reporte a PDF...");
    }

    private async Task ExportResumenPdf(string cedula)
    {
        await JS.InvokeVoidAsync("alert", $"Exportando resumen PDF para cédula: {cedula}");
    }

    public class DocentePostulanteModel
    {
        public string Cedula { get; set; } = string.Empty;
        public string NombreCompleto { get; set; } = string.Empty;
        public string Facultad { get; set; } = string.Empty;
        public string Carrera { get; set; } = string.Empty;
        public string EstadoPostulacion { get; set; } = "EN ESPERA";
    }

    public class ReporteResultado
    {
        public string Docente { get; set; } = string.Empty;
        public string Tipo { get; set; } = string.Empty;
        public string Detalle { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public string ValorPuntaje { get; set; } = string.Empty;
    }

    private List<ReporteResultado> ReportResults { get; set; } = new();
}