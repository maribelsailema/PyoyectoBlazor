@page "/reportes-admin"
@using System.Net.Http.Json
@using Proyecto.Backend.Domain.Entities.Models
@using Proyecto.Shared.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    /* Color Palette Variables (Red Theme) */
    :root {
        --primary-red: #8B0000; /* Dark Red */
        --accent-red: #a52a2a; /* Lighter Red for hover/active */
        --text-light: #f8f9fa;
        --text-dark: #343a40;
        --background-light: #f5f5f5;
        --background-dark: #e9ecef;
        --danger-color: #E74C3C; /* Strong red for danger actions */
        --success-color: #28a745;
        --info-color: #17a2b8;
        --warning-color: #ffc107;
        --secondary-color: #6c757d;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: var(--background-light);
        color: var(--text-dark);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    /* Navbar Styles */
    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--primary-red);
        padding: 1rem 2rem;
        color: var(--text-light);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .navbar-left h3 {
        margin: 0;
        font-size: 1.7rem;
        color: var(--text-light);
    }

        .navbar-left h3 strong {
            color: var(--text-light);
        }

    .nav-links {
        display: flex;
        gap: 1.5rem;
    }

    .nav-item {
        color: var(--text-light);
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: background-color 0.3s ease, color 0.3s ease;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
    }

        .nav-item i {
            margin-right: 0.5rem;
        }

        .nav-item:hover {
            background-color: var(--accent-red);
            color: var(--text-light);
        }

        .nav-item.active {
            background-color: var(--accent-red);
            font-weight: bold;
        }

    .cerrar-sesion {
        background-color: var(--danger-color);
    }

        .cerrar-sesion:hover {
            background-color: #c0392b; /* Darker shade of danger-color */
        }

    /* Main Content Styles */
    .contenido {
        flex-grow: 1;
        padding: 2rem;
        background-color: var(--background-light);
    }

    .reportes-admin {
        max-width: 1000px;
        margin: 0 auto;
        background-color: #ffffff;
        padding: 2.5rem;
        border-radius: 12px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    }

        .reportes-admin h1 {
            color: var(--primary-red);
            text-align: center;
            margin-bottom: 2rem;
            font-size: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .reportes-admin h1 i {
                margin-right: 1rem;
                font-size: 2.2rem;
            }

    /* Filtros Section */
    .filtros {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background-color: var(--background-dark);
        border-radius: 10px;
        border: 1px solid var(--primary-red);
    }

    .filtro label {
        display: block;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--text-dark);
        font-size: 1.05rem;
    }

    .filtro select,
    .filtro input[type="text"] {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .filtro select:focus,
        .filtro input[type="text"]:focus {
            border-color: var(--accent-red);
            box-shadow: 0 0 0 0.25rem rgba(139, 0, 0, 0.25);
            outline: none;
        }

    /* Acciones Section */
    .acciones {
        text-align: center;
        margin-bottom: 2.5rem;
    }

        .acciones button {
            background-color: var(--primary-red);
            color: var(--text-light);
            border: none;
            padding: 1rem 2rem;
            border-radius: 8px;
            font-size: 1.2rem;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
        }

            .acciones button:hover {
                background-color: var(--accent-red);
                transform: translateY(-2px);
            }

            .acciones button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

    /* Resultados Section */
    .resultados h2 {
        color: var(--primary-red);
        margin-bottom: 1.5rem;
        font-size: 2rem;
        display: flex;
        align-items: center;
    }

        .resultados h2 i {
            margin-right: 0.75rem;
            font-size: 1.8rem;
        }

    .resultados p {
        font-size: 1.1rem;
        color: var(--text-dark);
        text-align: center;
        padding: 1.5rem;
        border: 1px solid #ffcc00;
        background-color: #fffacd;
        border-radius: 8px;
    }

    .resultados table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        overflow: hidden; /* Ensures rounded corners apply to content */
    }

        .resultados table thead {
            background-color: var(--primary-red);
            color: var(--text-light);
        }

            .resultados table thead th {
                padding: 1rem 1.2rem;
                text-align: left;
                font-weight: 600;
                font-size: 1.05rem;
            }

        .resultados table tbody tr {
            background-color: #ffffff;
            transition: background-color 0.3s ease;
        }

            .resultados table tbody tr:nth-child(even) {
                background-color: var(--background-dark);
            }

            .resultados table tbody tr:hover {
                background-color: #f0f0f0;
            }

        .resultados table tbody td {
            padding: 1rem 1.2rem;
            border-bottom: 1px solid #e0e0e0;
            font-size: 0.95rem;
        }

    .exportar {
        text-align: right;
        margin-top: 2rem;
    }

        .exportar button {
            background-color: var(--info-color);
            color: var(--text-light);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.6rem;
        }

            .exportar button:hover {
                background-color: #138496; /* Darker info color */
            }

    /* Footer Styles */
    .footer {
        background-color: var(--primary-red);
        color: var(--text-light);
        padding: 2.5rem 2rem;
        text-align: center;
        font-size: 1rem;
        box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.2);
        margin-top: auto; /* Push footer to the bottom */
    }

    .footer-info {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        margin-bottom: 2rem;
        gap: 1.5rem;
    }

    .footer-section {
        flex: 1;
        min-width: 250px;
        text-align: left;
        padding: 0 1rem;
    }

        .footer-section h4 {
            color: var(--text-light);
            font-size: 1.3rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
        }

            .footer-section h4 i {
                margin-right: 0.6rem;
                font-size: 1.5rem;
            }

        .footer-section p, .footer-section a {
            color: var(--text-light);
            text-decoration: none;
            line-height: 1.6;
            transition: color 0.3s ease;
        }

            .footer-section a:hover {
                color: var(--background-dark); /* A slightly different shade for hover */
            }

            .footer-section a i {
                margin-right: 0.5rem;
            }

    .copyright {
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        font-size: 0.95rem;
        opacity: 0.9;
    }
</style>

<header class="navbar">
    <div class="navbar-left">
        <h3>👋 Bienvenido, <strong>@usuario.NombreCompleto</strong> (Administrador)</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio-admin" class="nav-item"><i class="bi bi-house-fill"></i> Inicio</NavLink>
        <NavLink href="/adminPostulaciones" class="nav-item"><i class="bi bi-clipboard-check-fill"></i> Postulantes</NavLink>
        <NavLink href="/reportes-admin" class="nav-item active"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion"><i class="bi bi-box-arrow-right"></i> Cerrar Sesión</NavLink>
    </nav>
</header>

<main class="contenido">
    <div class="reportes-admin">
        <h1><i class="bi bi-graph-up-arrow"></i> Generador de Reportes</h1>

        <section class="filtros">
            <div class="filtro">
                <label for="reportType">Tipo de Reporte</label>
                <select id="reportType" @bind="SelectedReportType">
                    <option value="">Seleccione un tipo</option>
                    @foreach (var type in ReportTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>

            <div class="filtro">
                <label for="cedulaDocente">Cédula del Docente</label>
                <input type="text" id="cedulaDocente" @bind="CedulaDocente" placeholder="Ej. 1234567890" />
            </div>

            @if (SelectedReportType == "Evaluaciones Docentes")
            {
                <div class="filtro">
                    <label for="periodo">Período</label>
                    <input type="text" id="periodo" @bind="SelectedPeriod" placeholder="Ej. 2024-1" />
                </div>
            }
        </section>

        <div class="acciones">
            <button @onclick="GenerateReport" disabled="@(!ValidarFiltros())">🔍 Generar Reporte</button>
        </div>

        <section class="resultados">
            <h2>📊 Resultados del Reporte</h2>

            @if (IsLoading)
            {
                <p>Cargando datos...</p>
            }
            else if (ReportResults.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>Docente</th>
                            <th>Tipo</th>
                            <th>Detalle</th>
                            <th>Fecha</th>
                            <th>Valor / Puntaje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in ReportResults)
                        {
                            <tr>
                                <td>@result.Docente</td>
                                <td>@result.Tipo</td>
                                <td>@result.Detalle</td>
                                <td>@result.Fecha:yyyy-MM-dd</td>
                                <td>@result.ValorPuntaje</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="exportar">
                    <button @onclick="ExportToPdf"><i class="bi bi-file-earmark-pdf-fill"></i> Exportar a PDF</button>
                </div>
            }
            else
            {
                <p>⚠️ No hay resultados. Ajusta los filtros e intenta de nuevo.</p>
            }
        </section>
    </div>
</main>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Acerca del Sistema</h4>
            <p>Módulo administrativo del Sistema de Promoción Docente FISEI.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Soporte Técnico</h4>
            <p>admin@fisei.edu.ec<br />+593 98 765 4321</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Accesos Rápidos</h4>
            <NavLink href="/verificar"><i class="bi bi-search"></i> Verificación</NavLink><br />
            <NavLink href="/reportes-admin"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción. Todos los Derechos Reservados.</p>
</footer>


@code {
    private UsuarioModel usuario = new();
    private string SelectedReportType { get; set; } = string.Empty;
    private string CedulaDocente { get; set; } = string.Empty;
    private string SelectedPeriod { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;

    private List<string> ReportTypes { get; set; } = new()
    {
        "Evaluaciones Docentes",
        "Capacitaciones por Docente",
        "Obras por Docente",
        "Investigaciones por Docente",
        "Roles y Antigüedad"
    };

    private List<ReporteResultado> ReportResults { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
            if (!string.IsNullOrWhiteSpace(cedula))
            {
                var response = await Http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/porCedula/{cedula}");
                if (response != null)
                    usuario = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el usuario: {ex.Message}");
        }
    }

    private bool ValidarFiltros()
    {
        if (string.IsNullOrWhiteSpace(SelectedReportType) || string.IsNullOrWhiteSpace(CedulaDocente))
            return false;
        if (SelectedReportType == "Evaluaciones Docentes" && string.IsNullOrWhiteSpace(SelectedPeriod))
            return false;
        return true;
    }

    private async Task GenerateReport()
    {
        IsLoading = true;
        ReportResults.Clear();
        try
        {
            switch (SelectedReportType)
            {
                case "Evaluaciones Docentes":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Evaluaciones/{CedulaDocente}/{SelectedPeriod}");
                    break;
                case "Capacitaciones por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Capacitaciones/{CedulaDocente}");
                    break;
                case "Obras por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Obras/{CedulaDocente}");
                    break;
                case "Investigaciones por Docente":
                    ReportResults = await Http.GetFromJsonAsync<List<ReporteResultado>>(
                        $"api/Reportes/Investigaciones/{CedulaDocente}");
                    break;
                case "Roles y Antigüedad":
                    var rol = await Http.GetFromJsonAsync<RolAntiguedad>($"api/Reportes/RolYAntiguedad/{CedulaDocente}");
                    if (rol != null)
                    {
                        ReportResults.Add(new ReporteResultado
                        {
                            Docente = rol.Nombre,
                            Tipo = "Rol y Antigüedad",
                            Detalle = rol.Rol,
                            Fecha = DateTime.Now,
                            ValorPuntaje = $"Antigüedad: {rol.Antiguedad} años"
                        });
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al obtener datos: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
        StateHasChanged();
    }

    private async Task ExportToPdf()
    {
        await JS.InvokeVoidAsync("window.print");
    }

    public class ReporteResultado
    {
        public string Docente { get; set; } = string.Empty;
        public string Tipo { get; set; } = string.Empty;
        public string Detalle { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public string ValorPuntaje { get; set; } = string.Empty;
    }

    public class RolAntiguedad
    {
        public string Cedula { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Rol { get; set; } = string.Empty;
        public int Antiguedad { get; set; }
    }
}