@page "/promocion"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ILogger<Promocion> Logger
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header class="navbar">
    <!-- Navbar sin cambios -->
</header>

<main class="contenido-promocion">
    <div class="container">
        @if (isLoading)
        {
            <div class="text-center mt-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p>Cargando información de promoción...</p>
            </div>
        }
        else if (errorLoading)
        {
            <div class="alert alert-danger mt-5">
                Error al cargar los datos. Intente nuevamente más tarde.
            </div>
        }
        else
        {
            <!-- Sección de Posición Actual -->
            <div class="current-position">
                <h3><i class="bi bi-info-circle"></i> Tu posición actual: <strong>@currentRol.Rol</strong></h3>
                <p class="text-muted">@GetRolDescription(currentRol.Rol)</p>
                <p><strong>Fecha de asignación:</strong> @currentRol.FechaAsignacion.ToString("dd/MM/yyyy")</p>
                <p><strong>Años en el rol:</strong> @currentRol.AniosEnRol años</p>
            </div>

            <!-- Tabla de Niveles de Promoción -->
            <div class="table-responsive">
                <table class="table table-hover promotion-table">
                    <thead>
                        <tr>
                            <th>Nivel de Promoción</th>
                            <th>Tiempo Requerido</th>
                            <th>Obras Requeridas</th>
                            <th>Puntaje Mínimo</th>
                            <th>Capacitación</th>
                            <th>Investigación</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var req in requisitosPromocion)
                        {
                            <tr>
                                <td>@req.HaciaRol</td>
                                <td>@req.TiempoMinimoAnios años</td>
                                <td>@req.ObrasMinimas</td>
                                <td>@req.PuntajeEvaluacionMinimo%</td>
                                <td>@req.HorasCapacitacionMin horas</td>
                                <td>@(req.MesesInvestigacionMin.HasValue ? $"{req.MesesInvestigacionMin} meses" : "-")</td>
                                <td>
                                    @if (req.CumpleRequisitos)
                                    {
                                        <span class="badge bg-success">Disponible</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No disponible</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Resumen de Cumplimiento -->
            <div class="requirements-info mt-4">
                <h4><i class="bi bi-card-checklist"></i> Tu progreso actual:</h4>
                <ul>
                    <li>
                        <strong>Tiempo en el rol:</strong> 
                        @currentRol.AniosEnRol años de @requisitosPromocion.FirstOrDefault()?.TiempoMinimoAnios requeridos
                        @if (currentRol.AniosEnRol >= requisitosPromocion.FirstOrDefault()?.TiempoMinimoAnios)
                        {
                            <i class="bi bi-check-circle-fill text-success"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle-fill text-danger"></i>
                        }
                    </li>
                    <li>
                        <strong>Obras publicadas:</strong> 
                        @totalObras de @requisitosPromocion.FirstOrDefault()?.ObrasMinimas requeridas
                        @if (totalObras >= requisitosPromocion.FirstOrDefault()?.ObrasMinimas)
                        {
                            <i class="bi bi-check-circle-fill text-success"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle-fill text-danger"></i>
                        }
                    </li>
                    <li>
                        <strong>Puntaje evaluación:</strong> 
                        @(ultimaEvaluacion?.PuntajeFinal ?? 0)% de @requisitosPromocion.FirstOrDefault()?.PuntajeEvaluacionMinimo requerido
                        @if ((ultimaEvaluacion?.PuntajeFinal ?? 0) >= requisitosPromocion.FirstOrDefault()?.PuntajeEvaluacionMinimo)
                        {
                            <i class="bi bi-check-circle-fill text-success"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle-fill text-danger"></i>
                        }
                    </li>
                    <li>
                        <strong>Horas capacitación:</strong> 
                        @totalHorasCapacitacion de @requisitosPromocion.FirstOrDefault()?.HorasCapacitacionMin requeridas
                        @if (totalHorasCapacitacion >= requisitosPromocion.FirstOrDefault()?.HorasCapacitacionMin)
                        {
                            <i class="bi bi-check-circle-fill text-success"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle-fill text-danger"></i>
                        }
                    </li>
                    @if (requisitosPromocion.FirstOrDefault()?.MesesInvestigacionMin.HasValue == true)
                    {
                        <li>
                            <strong>Meses investigación:</strong> 
                            @totalMesesInvestigacion de @requisitosPromocion.FirstOrDefault()?.MesesInvestigacionMin requeridos
                            @if (totalMesesInvestigacion >= requisitosPromocion.FirstOrDefault()?.MesesInvestigacionMin)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </li>
                    }
                </ul>

                @if (puedePostular)
                {
                    <button class="btn btn-primary" @onclick="Postular">
                        <i class="bi bi-send-check"></i> Postular para promoción
                    </button>
                }
                else
                {
                    <div class="alert alert-warning">
                        Aún no cumples con todos los requisitos para postularte.
                    </div>
                }
            </div>
        }
    </div>
</main>

@code {
    // Datos del usuario
    private string cedulaUsuario;
    private UsuarioDto usuarioInfo;
    
    // Rol actual
    private RolActualDto currentRol;
    
    // Requisitos
    private List<RequisitoPromocionDto> requisitosPromocion = new();
    
    // Datos de cumplimiento
    private int totalObras;
    private EvaluacionDto ultimaEvaluacion;
    private int totalHorasCapacitacion;
    private int totalMesesInvestigacion;
    
    // Estado
    private bool isLoading = true;
    private bool errorLoading = false;
    private bool puedePostular = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener cédula del usuario logueado
            cedulaUsuario = await localStorage.GetItemAsync<string>("userCedula");
            
            if (string.IsNullOrEmpty(cedulaUsuario))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Cargar datos en paralelo para mejor rendimiento
            var loadTasks = new List<Task>
            {
                LoadRolActual(),
                LoadRequisitosPromocion(),
                LoadDatosCumplimiento()
            };

            await Task.WhenAll(loadTasks);
            
            // Verificar si cumple todos los requisitos
            puedePostular = requisitosPromocion.Any() && 
                          requisitosPromocion.First().CumpleRequisitos;
        }
        catch (Exception ex)
        {
            errorLoading = true;
            Logger.LogError(ex, "Error al cargar datos de promoción");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRolActual()
    {
        var response = await Http.GetAsync($"api/RolesDocentes/RolActual/{cedulaUsuario}");
        if (response.IsSuccessStatusCode)
        {
            currentRol = await response.Content.ReadFromJsonAsync<RolActualDto>();
        }
        else
        {
            throw new Exception("No se pudo obtener el rol actual");
        }
    }

    private async Task LoadRequisitosPromocion()
    {
        if (currentRol == null) return;
        
        var response = await Http.GetAsync($"api/RequisitosAscensos/DesdeRol/{currentRol.Rol}");
        if (response.IsSuccessStatusCode)
        {
            requisitosPromocion = await response.Content.ReadFromJsonAsync<List<RequisitoPromocionDto>>();
            
            // Verificar cumplimiento para cada requisito
            foreach (var req in requisitosPromocion)
            {
                var cumple = await Http.GetFromJsonAsync<bool>(
                    $"api/Promocion/VerificarRequisitos/{cedulaUsuario}/{req.HaciaRol}");
                req.CumpleRequisitos = cumple;
            }
        }
    }

    private async Task LoadDatosCumplimiento()
    {
        // Obtener obras
        var obrasResponse = await Http.GetAsync($"api/Obras/ByDocente/{cedulaUsuario}");
        if (obrasResponse.IsSuccessStatusCode)
        {
            var obras = await obrasResponse.Content.ReadFromJsonAsync<List<ObraDto>>();
            totalObras = obras?.Count ?? 0;
        }

        // Obtener última evaluación
        var evalResponse = await Http.GetAsync($"api/EvaluacionesDocentes/Ultima/{cedulaUsuario}");
        if (evalResponse.IsSuccessStatusCode)
        {
            ultimaEvaluacion = await evalResponse.Content.ReadFromJsonAsync<EvaluacionDto>();
        }

        // Obtener horas de capacitación
        var capResponse = await Http.GetAsync($"api/Capacitaciones/HorasTotales/{cedulaUsuario}");
        if (capResponse.IsSuccessStatusCode)
        {
            totalHorasCapacitacion = await capResponse.Content.ReadFromJsonAsync<int>();
        }

        // Obtener meses de investigación
        var invResponse = await Http.GetAsync($"api/Investigaciones/MesesTotales/{cedulaUsuario}");
        if (invResponse.IsSuccessStatusCode)
        {
            totalMesesInvestigacion = await invResponse.Content.ReadFromJsonAsync<int>();
        }
    }

    private string GetRolDescription(string rol)
    {
        return rol switch
        {
            "D1" => "Docente Nivel 1 - Puedes postularte al nivel D2 cuando cumplas los requisitos",
            "D2" => "Docente Nivel 2 - Puedes postularte al nivel D3 cuando cumplas los requisitos",
            "D3" => "Docente Nivel 3 - Puedes postularte al nivel D4 cuando cumplas los requisitos",
            "D4" => "Docente Nivel 4 - Máximo nivel alcanzable",
            _ => "Rol no reconocido"
        };
    }

    private async Task Postular()
    {
        if (!puedePostular || currentRol == null || !requisitosPromocion.Any()) return;
        
        try
        {
            var response = await Http.PostAsJsonAsync("api/Promocion/Postular", new {
                Cedula = cedulaUsuario,
                RolActual = currentRol.Rol,
                RolSolicitado = requisitosPromocion.First().HaciaRol,
                FechaSolicitud = DateTime.Now
            });

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/perfil?postulacion=exito");
            }
            else
            {
                Logger.LogError("Error en la postulación: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al postular");
        }
    }

    // Modelos DTO
    public class UsuarioDto
    {
        public string Ced { get; set; }
        public string Nom1 { get; set; }
        public string Nom2 { get; set; }
        public string Ape1 { get; set; }
        public string Ape2 { get; set; }
    }

    public class RolActualDto
    {
        public string Rol { get; set; }
        public DateTime FechaAsignacion { get; set; }
        public int AniosEnRol { get; set; }
    }

    public class RequisitoPromocionDto
    {
        public string DesdeRol { get; set; }
        public string HaciaRol { get; set; }
        public int TiempoMinimoAnios { get; set; }
        public int ObrasMinimas { get; set; }
        public decimal PuntajeEvaluacionMinimo { get; set; }
        public int HorasCapacitacionMin { get; set; }
        public int? MesesInvestigacionMin { get; set; }
        public bool CumpleRequisitos { get; set; }
    }

    public class ObraDto
    {
        public int IdObra { get; set; }
        public string TipoObra { get; set; }
        public DateTime Fecha { get; set; }
    }

    public class EvaluacionDto
    {
        public string Periodo { get; set; }
        public decimal PuntajeFinal { get; set; }
        public DateTime FechaEvaluacion { get; set; }
    }
}