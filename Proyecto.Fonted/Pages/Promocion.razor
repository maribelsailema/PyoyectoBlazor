@page "/promocion"
@using System.ComponentModel.DataAnnotations
@using Proyecto.Shared.Models
@inject NavigationManager Navigation
@inject ILogger<Promocion> Logger
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header class="navbar">
    <div class="navbar-left">
        <h3>Promoción Docente</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio" class="nav-item"><i class="bi bi-house-fill"></i> Inicio</NavLink>
        <NavLink href="/promocion" class="nav-item"><i class="bi bi-bar-chart-line-fill"></i> Promoción</NavLink>
        <NavLink href="/perfil" class="nav-item"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        <NavLink href="/exportar" class="nav-item"><i class="bi bi-download"></i> Exportar</NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion"><i class="bi bi-box-arrow-right"></i> Cerrar Sesión</NavLink>
    </nav>
</header>

<main class="contenido-promocion">
    <div class="container">
        @if (isLoading)
        {
            <div class="text-center mt-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p>Cargando información de promoción...</p>
            </div>
        }
        else if (errorLoading)
        {
            <div class="alert alert-danger mt-5">
                Error al cargar los datos. Intente nuevamente más tarde.
            </div>
        }
        else
        {
            <!-- Posición Actual -->
            @if (currentRol != null)
            {
                <div class="current-position mb-4">
                    <h3><i class="bi bi-info-circle"></i> Tu posición actual: <strong>@currentRol.Rol</strong></h3>
                    <p class="text-muted">@GetRolDescription(currentRol.Rol)</p>
                    <p><strong>Fecha de asignación:</strong> @currentRol.FechaAsignacion.ToString("dd/MM/yyyy")</p>
                    <p><strong>Años en el rol:</strong> @currentRol.AniosEnRol años</p>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    No se pudo cargar tu rol actual. Se mostrarán los requisitos generales.
                </div>
            }

            <!-- Tabla de Requisitos -->
            <div class="table-responsive mb-4">
                <h4><i class="bi bi-list-check"></i> Requisitos para el siguiente nivel:</h4>
                <table class="table table-hover promotion-table">
                    <thead>
                        <tr>
                            <th>Nivel</th>
                            <th>Tiempo</th>
                            <th>Obras</th>
                            <th>Puntaje</th>
                            <th>Capacitación</th>
                            <th>Investigación</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (requisitosPromocion.Any())
                        {
                            foreach (var req in requisitosPromocion)
                            {
                                <tr>
                                    <td>@req.HaciaRol</td>
                                    <td>@req.TiempoMinimoAnios años</td>
                                    <td>@req.ObrasMinimas</td>
                                    <td>@req.PuntajeEvaluacionMinimo%</td>
                                    <td>@req.HorasCapacitacionMin horas</td>
                                    <td>@(req.MesesInvestigacionMin.HasValue ? $"{req.MesesInvestigacionMin} meses" : "-")</td>
                                    <td>
                                        @if (req.CumpleRequisitos)
                                        {
                                            <span class="badge bg-success">Disponible</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No disponible</span>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center text-muted">No se encontraron requisitos de promoción.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Resumen de Cumplimiento -->
            @if (currentRol != null && requisitosPromocion.Any())
            {
                var primerRequisito = requisitosPromocion.First();

                <div class="requirements-info">
                    <h4><i class="bi bi-card-checklist"></i> Tu progreso actual:</h4>
                    <ul>
                        <li>
                            <strong>Tiempo en el rol:</strong> @currentRol.AniosEnRol años de @primerRequisito.TiempoMinimoAnios requeridos
                            @if (currentRol.AniosEnRol >= primerRequisito.TiempoMinimoAnios)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </li>
                        <li>
                            <strong>Obras publicadas:</strong> @totalObras de @primerRequisito.ObrasMinimas requeridas
                            @if (totalObras >= primerRequisito.ObrasMinimas)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </li>
                        <li>
                            <strong>Puntaje evaluación:</strong> @(ultimaEvaluacion?.PuntajeFinal ?? 0)% de @primerRequisito.PuntajeEvaluacionMinimo requerido
                            @if ((ultimaEvaluacion?.PuntajeFinal ?? 0) >= primerRequisito.PuntajeEvaluacionMinimo)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </li>
                        <li>
                            <strong>Horas capacitación:</strong> @totalHorasCapacitacion de @primerRequisito.HorasCapacitacionMin requeridas
                            @if (totalHorasCapacitacion >= primerRequisito.HorasCapacitacionMin)
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else
                            {
                                <i class="bi bi-x-circle-fill text-danger"></i>
                            }
                        </li>
                        @if (primerRequisito.MesesInvestigacionMin.HasValue)
{
    <li>
        <strong>Meses investigación:</strong> @totalMesesInvestigacion de @primerRequisito.MesesInvestigacionMin requeridos
        @if (totalMesesInvestigacion >= primerRequisito.MesesInvestigacionMin)
        {
            <i class="bi bi-check-circle-fill text-success"></i>
        }
        else
        {
            <i class="bi bi-x-circle-fill text-danger"></i>
        }
    </li>
}
else
{
    <li>
        <strong>Meses investigación:</strong> No aplica para este nivel <i class="bi bi-dash-circle text-muted"></i>
    </li>
}
                    </ul>

                    @if (puedePostular)
                    {
                        <button class="btn btn-primary" @onclick="Postular">
                            <i class="bi bi-send-check"></i> Postular para promoción
                        </button>
                    }
                    else
                    {
                        <div class="alert alert-warning mt-2">
                            Aún no cumples con todos los requisitos para postularte.
                        </div>
                    }
                </div>
            }
        }
    </div>
</main>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Sobre Nosotros</h4>
            <p>Sistema de Promoción para Docentes de la FISEI.<br>Para agilizar trámites.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Contactos</h4>
            <p>support@correo.com<br>+593 99 234 56789</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Enlaces Rápidos</h4>
            <NavLink href="/inicio"><i class="bi bi-house-fill"></i> Inicio</NavLink><br />
            <NavLink href="/promocion"><i class="bi bi-bar-chart-line-fill"></i> Promoción</NavLink><br />
            <NavLink href="/perfil"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>
@code {
    private string cedulaUsuario;
    private RolActualDto currentRol;
    private List<RequisitoPromocionDto> requisitosPromocion = new();
    private int totalObras;
    private EvaluacionDto ultimaEvaluacion;
    private int totalHorasCapacitacion;
    private int totalMesesInvestigacion;
    private bool isLoading = true;
    private bool errorLoading = false;
    private bool puedePostular = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cedulaUsuario = await localStorage.GetItemAsync<string>("cedulaUsuario");

            if (string.IsNullOrWhiteSpace(cedulaUsuario))
            {
                Logger.LogWarning("No se encontró la cédula del usuario en localStorage.");
                errorLoading = true;
                return;
            }

            await LoadRequisitosPromocion();

            try
            {
                await LoadRolActual();
                await LoadDatosCumplimiento();

                puedePostular = requisitosPromocion.Any() && requisitosPromocion.First().CumpleRequisitos;
            }
            catch (Exception rolEx)
            {
                Logger.LogWarning(rolEx, "No se pudo obtener información completa del rol actual.");
                // No lanzar error, se mostrará tabla genérica
            }
        }
        catch (Exception ex)
        {
            errorLoading = true;
            Logger.LogError(ex, "Error al inicializar página de promoción");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadRolActual()
    {
        var response = await Http.GetAsync($"api/RolesDocentes/RolActual/{cedulaUsuario}");
        if (response.IsSuccessStatusCode)
        {
            currentRol = await response.Content.ReadFromJsonAsync<RolActualDto>();
        }
        else
        {
            throw new Exception("No se pudo obtener el rol actual");
        }
    }

    private async Task LoadRequisitosPromocion()
    {
        var response = await Http.GetAsync("api/RequisitosAscensos/Todos");
        if (response.IsSuccessStatusCode)
        {
            requisitosPromocion = await response.Content.ReadFromJsonAsync<List<RequisitoPromocionDto>>() ?? new();

            if (!string.IsNullOrWhiteSpace(cedulaUsuario))
            {
                foreach (var req in requisitosPromocion)
                {
                    try
                    {
                        var cumple = await Http.GetFromJsonAsync<bool>($"api/Promocion/VerificarRequisitos/{cedulaUsuario}/{req.HaciaRol}");
                        req.CumpleRequisitos = cumple;
                    }
                    catch
                    {
                        req.CumpleRequisitos = false;
                    }
                }
            }
        }
    }

    private async Task LoadDatosCumplimiento()
    {
        try
        {
            var obrasResponse = await Http.GetAsync($"api/Obras/ByDocente/{cedulaUsuario}");
            if (obrasResponse.IsSuccessStatusCode)
            {
                var obras = await obrasResponse.Content.ReadFromJsonAsync<List<ObraDto>>();
                totalObras = obras?.Count ?? 0;
            }

            var evalResponse = await Http.GetAsync($"api/EvaluacionesDocentes/Ultima/{cedulaUsuario}");
            if (evalResponse.IsSuccessStatusCode)
            {
                ultimaEvaluacion = await evalResponse.Content.ReadFromJsonAsync<EvaluacionDto>();
            }

            var capResponse = await Http.GetAsync($"api/Capacitaciones/HorasTotales/{cedulaUsuario}");
            if (capResponse.IsSuccessStatusCode)
            {
                totalHorasCapacitacion = await capResponse.Content.ReadFromJsonAsync<int>();
            }

            var invResponse = await Http.GetAsync($"api/Investigaciones/MesesTotales/{cedulaUsuario}");
            if (invResponse.IsSuccessStatusCode)
            {
                totalMesesInvestigacion = await invResponse.Content.ReadFromJsonAsync<int>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error al obtener datos de cumplimiento");
        }
    }

    private async Task Postular()
    {
        if (!puedePostular || currentRol == null || !requisitosPromocion.Any()) return;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Promocion/Postular", new
            {
                Cedula = cedulaUsuario,
                RolActual = currentRol.Rol,
                RolSolicitado = requisitosPromocion.First().HaciaRol,
                FechaSolicitud = DateTime.Now
            });

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/perfil?postulacion=exito");
            }
            else
            {
                Logger.LogError("Error en la postulación: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al postular");
        }
    }

    private string GetRolDescription(string rol) => rol switch
    {
        "D1" => "Docente Nivel 1 - Puedes postularte al nivel D2 cuando cumplas los requisitos",
        "D2" => "Docente Nivel 2 - Puedes postularte al nivel D3 cuando cumplas los requisitos",
        "D3" => "Docente Nivel 3 - Puedes postularte al nivel D4 cuando cumplas los requisitos",
        "D4" => "Docente Nivel 4 - Máximo nivel alcanzable",
        _ => "Rol no reconocido"
    };

   


    public class ObraDto
    {
        public int IdObra { get; set; }
        public string TipoObra { get; set; }
        public DateOnly Fecha { get; set; }
    }

    public class EvaluacionDto
    {
        public string Periodo { get; set; }
        public decimal PuntajeFinal { get; set; }
        public DateTime FechaEvaluacion { get; set; }
    }
}
