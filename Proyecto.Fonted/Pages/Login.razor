@page "/"
@using System.ComponentModel.DataAnnotations
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    /* Estilos para el modal de validación */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
    }

    .modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 90%;
        max-width: 560px; /* 40% más grande */
        max-height: 360px; /* 20% más alto */
        overflow-y: auto;
        box-shadow: 0 0 20px rgba(139, 0, 0, 0.4);
        text-align: center;
        z-index: 10000;
        box-sizing: border-box;
        font-family: sans-serif;
        animation: fadeIn 0.3s ease-in-out;
        position: relative;
        border: 2px solid #8B0000; /* Borde rojo */
    }

        .modal h3 {
            margin-top: 0;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            color: #8B0000; /* Rojo oscuro */
        }

        .modal ul.validation-errors {
            text-align: left;
            color: #8B0000; /* Rojo oscuro */
            padding-left: 1.5rem;
            margin-bottom: 1.5rem;
            font-size: 1.2rem;
        }

    .btn-close-top {
        position: absolute;
        top: 15px;
        right: 15px;
        background-color: transparent;
        border: none;
        font-size: 1.8rem;
        cursor: pointer;
        color: #8B0000; /* Rojo oscuro */
        transition: color 0.2s ease;
    }

        .btn-close-top:hover {
            color: #a52a2a; /* Rojo más claro */
        }

    .error-message {
        color: #8B0000; /* Rojo oscuro */
        text-align: center;
        margin-top: 1.5rem;
        font-size: 1.3rem;
        font-weight: bold;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Estilos principales del formulario de login */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f5f5f5;
        padding: 2rem;
    }

    .login-form {
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(139, 0, 0, 0.2);
        padding: 4rem; /* Más padding para mayor altura */
        width: 100%;
        max-width: 672px; /* 40% más ancho */
        min-height: 580px; /* 20% más alto */
        border: 3px solid #8B0000; /* Borde rojo */
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .login-header {
        text-align: center;
        margin-bottom: 3rem;
    }

        .login-header i {
            color: #8B0000; /* Rojo oscuro */
            font-size: 5.5rem;
            margin-bottom: 1.8rem;
        }

        .login-header h2 {
            color: #8B0000; /* Rojo oscuro */
            font-size: 2.8rem;
            margin-bottom: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .login-header p {
            font-size: 1.4rem;
            color: #666;
        }

    label {
        display: block;
        margin-bottom: 1rem;
        font-size: 1.4rem;
        color: #8B0000; /* Rojo oscuro */
        font-weight: 600;
    }

    .input-group {
        position: relative;
        margin-bottom: 2.2rem;
    }

        .input-group i {
            position: absolute;
            left: 18px;
            top: 50%;
            transform: translateY(-50%);
            color: #8B0000; /* Rojo oscuro */
            font-size: 1.6rem;
        }

    .form-input {
        width: 100%;
        padding: 1.5rem 1.5rem 1.5rem 4.5rem;
        border: 2px solid #ddd;
        border-radius: 10px;
        font-size: 1.4rem;
        transition: all 0.3s;
    }

        .form-input:focus {
            border-color: #8B0000; /* Rojo oscuro */
            outline: none;
            box-shadow: 0 0 0 4px rgba(139, 0, 0, 0.2);
        }

    .btn-login {
        width: 100%;
        background-color: #8B0000 !important; /* Rojo oscuro - forzado */
        color: white !important;
        border: none;
        padding: 1.6rem;
        border-radius: 10px;
        font-size: 1.6rem;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

        .btn-login:hover {
            background-color: #a52a2a !important; /* Rojo más claro */
        }

        .btn-login i {
            margin-right: 12px;
            font-size: 1.8rem;
        }
</style>

@if (showValidationModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h3>Ningún campo debe ser vacío</h3>
            <ValidationSummary class="validation-errors" />
            <button class="btn-close-top" @onclick="() => showValidationModal = false" title="Cerrar">✖</button>
        </div>
    </div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" OnInvalidSubmit="MostrarErroresValidacion">
    <DataAnnotationsValidator />

    <div class="login-container">
        <div class="login-form">
            <div class="login-header">
                <i class="fas fa-user-circle"></i>
                <h2>LOGIN</h2>
                <p>Ingrese sus credenciales</p>
            </div>

            <label>Usuario</label>
            <div class="input-group">
                <i class="fas fa-user"></i>
                <InputText @bind-Value="loginModel.Usuario" class="form-input" placeholder="Ingrese su usuario" autocomplete="username" />
            </div>

            <label>Contraseña</label>
            <div class="input-group">
                <i class="fas fa-lock"></i>
                <InputText @bind-Value="loginModel.Contrasena" class="form-input" placeholder="Ingrese su contraseña" type="password" autocomplete="current-password" />
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="error-message">@mensajeError</div>
            }

            <button class="btn-login" type="submit">
                <i class="fas fa-sign-in-alt"></i> Ingresar
            </button>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string mensajeError = "";
    private bool showValidationModal = false;

    private async Task HandleLogin()
    {
        mensajeError = "";
        showValidationModal = false;
        Logger.LogInformation("Intentando login con usuario: {Usuario}", loginModel.Usuario);

        var datosLogin = new
        {
            usuari = loginModel.Usuario,
            pass = loginModel.Contrasena
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Usuario/Validar", datosLogin);

            if (response.IsSuccessStatusCode)
            {
                var usuario = await response.Content.ReadFromJsonAsync<Usuario>();

                if (usuario is not null && !string.IsNullOrEmpty(usuario.Ced))
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "cedulaUsuario", usuario.Ced);

                    var tipo = usuario.TipoUsuario?.ToLower();
                    if (tipo == "docente")
                    {
                        Navigation.NavigateTo($"/inicio?ced={usuario.Ced}");
                    }
                    else if (tipo == "admin")
                    {
                        Navigation.NavigateTo($"/inicio-admin?ced={usuario.Ced}");
                    }
                    else
                    {
                        mensajeError = "Tipo de usuario no reconocido.";
                    }
                }
                else
                {
                    mensajeError = "Usuario no válido.";
                }
            }
            else
            {
                mensajeError = "Credenciales incorrectas.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error en login.");
            mensajeError = $"Error en la conexión: {ex.Message}";
        }
    }

    private void MostrarErroresValidacion(EditContext context)
    {
        showValidationModal = true;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es obligatorio.")]
        public string? Usuario { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string? Contrasena { get; set; }
    }

    public class Usuario
    {
        public string Ced { get; set; }
        public string Nom1 { get; set; }
        public string Nom2 { get; set; }
        public string Ape1 { get; set; }
        public string Ape2 { get; set; }
        public string Usuari { get; set; }
        public string TipoUsuario { get; set; }
        public string FechaIngreso { get; set; }
    }
}