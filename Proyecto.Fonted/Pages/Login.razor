@page "/"
@using System.ComponentModel.DataAnnotations
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS


<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9999;
    }

    .modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 1.5rem 2rem;
        border-radius: 10px;
        width: 90%;
        max-width: 400px;
        max-height: 300px; /* Limita la altura */
        overflow-y: auto; /* Agrega scroll si el contenido lo necesita */
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        text-align: center;
        z-index: 10000;
        box-sizing: border-box;
        font-family: sans-serif;
        animation: fadeIn 0.3s ease-in-out;
        position: relative;
    }


        .modal h3 {
            margin-top: 0;
            margin-bottom: 1rem;
            font-size: 1.25rem;
            color: #333;
        }

        .modal ul.validation-errors {
            text-align: left;
            color: red;
            padding-left: 1.2rem;
            margin-bottom: 1rem;
        }

 

    .btn-close-top {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: transparent;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #999;
        transition: color 0.2s ease;
    }

        .btn-close-top:hover {
            color: #dc3545;
        }
    .error-message {
        color: red;
        text-align: center;
        margin-top: 1rem;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.9);
        }


        to {
            opacity: 1;
            transform: scale(1);
        }
    }
</style>



@if (showValidationModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h3>Errores de validación</h3>
            <ValidationSummary class="validation-errors" />
            <button class="btn-close-top" @onclick="() => showValidationModal = false" title="Cerrar">✖</button>
        </div>
    </div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" OnInvalidSubmit="MostrarErroresValidacion">
    <DataAnnotationsValidator />

    <div class="login-container">
        <div class="login-form">
            <div class="login-header">
                <i class="fas fa-user-circle fa-3x"></i>
                <h2>LOGIN</h2>
                <p>Ingrese sus credenciales</p>
            </div>

            <label>Usuario</label>
            <div class="input-group">
                <i class="fas fa-user"></i>
                <InputText @bind-Value="loginModel.Usuario" class="form-input" placeholder="Ingrese su usuario" autocomplete="username" />
            </div>

            <label>Contraseña</label>
            <div class="input-group">
                <i class="fas fa-lock"></i>
                <InputText @bind-Value="loginModel.Contrasena" class="form-input" placeholder="Ingrese su contraseña" type="password" autocomplete="current-password" />
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="error-message">@mensajeError</div>
            }

            <button class="btn-login" type="submit">
                <i class="fas fa-sign-in-alt"></i> Ingresar
            </button>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string mensajeError = "";
    private bool showValidationModal = false;

    private async Task HandleLogin()
    {
        mensajeError = "";
        showValidationModal = false;
        Logger.LogInformation("Intentando login con usuario: {Usuario}", loginModel.Usuario);

        var datosLogin = new
        {
            usuari = loginModel.Usuario,
            pass = loginModel.Contrasena
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Usuario/Validar", datosLogin);

            if (response.IsSuccessStatusCode)

              {

                var usuario = await response.Content.ReadFromJsonAsync<Usuario>();

                if (usuario is not null && !string.IsNullOrEmpty(usuario.Ced))
                {

                    await JS.InvokeVoidAsync("localStorage.setItem", "cedulaUsuario", usuario.Ced);

                    var tipo = usuario.TipoUsuario?.ToLower();
                    if (tipo == "docente")
                    {
                        Navigation.NavigateTo($"/inicio?ced={usuario.Ced}");
                    }
                    else if (tipo == "admin")
                    {
                        Navigation.NavigateTo($"/inicio-admin?ced={usuario.Ced}");
                    }
                    else
                    {
                        mensajeError = "Tipo de usuario no reconocido.";
                    }

                }
                else
                {
                    mensajeError = "Usuario no válido.";
                }



            }
            else
            {
                mensajeError = "Credenciales incorrectas.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error en login.");
            mensajeError = $"Error en la conexión al servidor: {ex.Message}";
        }
    }

    private void MostrarErroresValidacion(EditContext context)
    {
        showValidationModal = true;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es obligatorio.")]
        public string? Usuario { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string? Contrasena { get; set; }
    }

    public class Usuario
    {
        public string Ced { get; set; }
        public string Nom1 { get; set; }
        public string Nom2 { get; set; }
        public string Ape1 { get; set; }
        public string Ape2 { get; set; }
        public string Usuari { get; set; }
        public string TipoUsuario { get; set; }
        public string FechaIngreso { get; set; }
    }
}

