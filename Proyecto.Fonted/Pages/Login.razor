@page "/"
@using System.ComponentModel.DataAnnotations
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject HttpClient Http

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-container">
        <div class="login-form">
            <div class="login-header">
                <i class="fas fa-user-circle fa-3x"></i>
                <h2>LOGIN</h2>
                <p>Ingrese sus credenciales</p>
            </div>

            <label>Usuario</label>
            <div class="input-group">
                <i class="fas fa-user"></i>
                <InputText @bind-Value="loginModel.Usuario" class="form-input" placeholder="Ingrese su usuario" autocomplete="username" />
            </div>

            <label>Contraseña</label>
            <div class="input-group">
                <i class="fas fa-lock"></i>
                <InputText @bind-Value="loginModel.Contrasena" class="form-input" placeholder="Ingrese su contraseña" type="password" autocomplete="current-password" />
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="error-message">@mensajeError</div>
            }

            <button class="btn-login" type="submit">
                <i class="fas fa-sign-in-alt"></i> Ingresar
            </button>

            <div class="login-links">
                <NavLink href="/recuperar-contrasena" class="login-link">
                    <i class="fas fa-question-circle"></i> ¿Olvidó su contraseña?
                </NavLink>
                <span>
                    ¿No tiene una cuenta?
                    <NavLink href="/registro" class="login-link">Regístrese aquí</NavLink>
                </span>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string mensajeError = "";

    private async Task HandleLogin()
    {
        Logger.LogInformation("Intentando login con usuario: {Usuario}", loginModel.Usuario);

        var datosLogin = new
        {
            usuari = loginModel.Usuario,
            pass = loginModel.Contrasena
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Usuario/Validar", datosLogin);

            if (response.IsSuccessStatusCode)
            {
                var usuario = await response.Content.ReadFromJsonAsync<Usuario>();

                if (usuario is not null && !string.IsNullOrEmpty(usuario.Ced))
                {
                    // Redirigir con la cédula como query string
                    Navigation.NavigateTo($"/inicio?ced={usuario.Ced}");
                }
                else
                {
                    mensajeError = "Usuario no válido.";
                }
            }
            else
            {
                mensajeError = "Credenciales incorrectas.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error en login.");
            mensajeError = "Error en la conexión al servidor.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es obligatorio.")]
        public string? Usuario { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        public string? Contrasena { get; set; }
    }

    public class Usuario
    {
        public string Ced { get; set; }
        public string Nom1 { get; set; }
        public string Nom2 { get; set; }
        public string Ape1 { get; set; }
        public string Ape2 { get; set; }
        public string Usuari { get; set; }
        public string TipoUsuario { get; set; }
        public string FechaIngreso { get; set; }
    }
}
