@page "/adminPostulaciones"
@inject HttpClient Http
@using Proyecto.Shared.Models
@using Proyecto.Shared.Dtos
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<style>
    /* Color Palette Variables (Red Theme) */
    :root {
        --primary-color: #8B0000; /* Dark Red */
        --primary-dark-color: #6a0000; /* Even darker red for hover/active states */
        --secondary-color: #f5f5f5; /* Light gray for backgrounds, kept for contrast */
        --text-dark: #343a40; /* Dark text */
        --text-light: #ffffff; /* Light text for dark backgrounds */
        --success-color: #28a745; /* Green for success (kept as standard UI color) */
        --danger-color: #E74C3C; /* Strong red for danger actions (kept as standard UI color) */
        --warning-color: #ffc107; /* Orange for warning (kept as standard UI color) */
        --info-color: #17a2b8; /* Blue for info (kept as standard UI color) */
    }

    /* General Body Styles */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: var(--secondary-color);
        color: var(--text-dark);
    }

    /* Navbar Styles */
    .navbar {
        background-color: var(--primary-color);
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .navbar-left h3 {
        color: var(--text-light);
        margin: 0;
        font-size: 1.2rem;
    }

    .nav-links .nav-item {
        color: var(--text-light);
        text-decoration: none;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s ease;
        border-radius: 5px;
    }

        .nav-links .nav-item:hover,
        .nav-links .nav-item.active {
            background-color: var(--primary-dark-color);
            color: var(--text-light);
        }

        .nav-links .nav-item i {
            margin-right: 0.5rem;
        }

    .cerrar-sesion {
        background-color: var(--danger-color);
    }

        .cerrar-sesion:hover {
            background-color: #c0392b; /* Darker red, slightly different from danger-color to show hover effect */
        }

    /* Main Content Styles */
    .contenido-promocion {
        padding: 2rem;
        background-color: var(--text-light); /* White background for content */
        margin: 2rem auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        max-width: 1200px;
    }

    .titulo-admin {
        color: var(--primary-color);
        margin-bottom: 1rem;
        font-size: 2rem;
    }

        .titulo-admin i {
            margin-right: 0.75rem;
        }

    /* Table Styles */
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.03);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.07);
    }

    .table-primary thead {
        background-color: var(--primary-color);
        color: var(--text-light);
    }

    .table-primary th {
        border-color: var(--primary-dark-color);
    }

    /* Badge Styles */
    .badge {
        padding: 0.4em 0.7em;
        border-radius: 0.25rem;
        font-weight: bold;
    }

        .badge.bg-success {
            background-color: var(--success-color) !important;
            color: var(--text-light);
        }

        .badge.bg-danger {
            background-color: var(--danger-color) !important;
            color: var(--text-light);
        }

        .badge.bg-warning {
            background-color: var(--warning-color) !important;
            color: var(--text-dark); /* Dark text for warning badge */
        }

    /* Button Styles */
    .btn-success {
        background-color: var(--success-color);
        border-color: var(--success-color);
    }

        .btn-success:hover {
            background-color: #219d53; /* Darker green */
            border-color: #219d53;
        }

    .btn-danger {
        background-color: var(--danger-color);
        border-color: var(--danger-color);
    }

        .btn-danger:hover {
            background-color: #c0392b; /* Darker red */
            border-color: #c0392b;
        }

    .btn-outline-info {
        color: var(--info-color);
        border-color: var(--info-color);
    }

        .btn-outline-info:hover {
            background-color: var(--info-color);
            color: var(--text-light);
        }

    .btn-outline-secondary {
        color: var(--text-dark);
        border-color: var(--text-dark);
    }

        .btn-outline-secondary:hover {
            background-color: var(--text-dark);
            color: var(--text-light);
        }

    /* Modal Styles */
    .modal-content {
        border-radius: 0.5rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        background-color: var(--primary-color);
        color: var(--text-light);
        border-bottom: none;
        border-top-left-radius: 0.5rem;
        border-top-right-radius: 0.5rem;
    }

    .modal-title {
        color: var(--text-light);
    }

    .modal-footer {
        border-top: none;
    }

    /* Footer Styles */
    .footer {
        background-color: var(--primary-dark-color);
        color: var(--secondary-color);
        padding: 2rem 0;
        margin-top: 3rem;
        text-align: center;
        box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
    }

    .footer-info {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        margin-bottom: 1.5rem;
    }

    .footer-section {
        flex: 1;
        min-width: 250px;
        margin: 1rem;
    }

        .footer-section h4 {
            color: var(--text-light);
            margin-bottom: 1rem;
            font-size: 1.1rem;
        }

            .footer-section h4 i {
                margin-right: 0.5rem;
            }

        .footer-section p,
        .footer-section a {
            color: var(--secondary-color);
            text-decoration: none;
            font-size: 0.9rem;
            line-height: 1.6;
        }

            .footer-section a:hover {
                color: var(--text-light);
                text-decoration: underline;
            }

    .copyright {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
    }
</style>

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido, @usuario.NombreCompleto (Administrador)</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio-admin" class="nav-item"><i class="bi bi-house-fill"></i> Inicio</NavLink>
        <NavLink href="/adminPostulaciones" class="nav-item"><i class="bi bi-clipboard-check-fill"></i> Ver Postulantes</NavLink>
        <NavLink href="/reportes-admin" class="nav-item"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion"><i class="bi bi-box-arrow-right"></i> Cerrar Sesión</NavLink>
    </nav>
</header>

<main class="contenido-promocion">
    <div class="container">
        <div class="text-center mb-4">
            <h2 class="titulo-admin"><i class="bi bi-person-lines-fill"></i> Solicitudes de Postulación</h2>
            <p class="text-muted">Revisa y gestiona las solicitudes enviadas por los docentes.</p>
        </div>

        @if (postulaciones == null)
        {
            <div class="text-center mt-4">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-2">Cargando postulaciones...</p>
            </div>
        }
        else if (!postulaciones.Any())
        {
            <div class="alert alert-info text-center">No hay solicitudes de postulación.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover shadow-sm text-center">
                    <thead class="table-primary">
                        <tr>
                            <th>Cédula</th>
                            <th>Rol Actual</th>
                            <th>Rol Solicitado</th>
                            <th>Fecha</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                            <th>Resumen</th>
                            <th>PDFs</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in postulaciones)
                        {
                            <tr>
                                <td>@p.Cedula</td>
                                <td>@p.RolActual</td>
                                <td>@p.RolSolicitado</td>
                                <td>@p.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                <td>
                                    @if (p.Estado == "Aceptada")
                                    {
                                        <span class="badge bg-success">Aceptada</span>
                                    }
                                    else if (p.Estado == "Rechazada")
                                    {
                                        <span class="badge bg-danger">Rechazada</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Pendiente</span>
                                    }
                                </td>
                                <td>
                                    @if (p.Estado == "Pendiente")
                                    {
                                        <button class="btn btn-sm btn-success me-2" @onclick="() => CambiarEstadoAceptada(p.Id)">
                                            <i class="bi bi-check-circle"></i> Aceptar
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => CambiarEstadoRechazada(p.Id)">
                                            <i class="bi bi-x-circle"></i> Rechazar
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin acciones</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-outline-info btn-sm" @onclick="async () => await MostrarResumen(p.Cedula)">
                                        <i class="bi bi-file-earmark-text"></i> Ver resumen
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => VerPdfs(p.Cedula)">
                                        <i class="bi bi-file-earmark-pdf"></i> PDFs
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (mostrarModal)
        {
            <div class="modal fade show d-block" id="modalResumen" tabindex="-1">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Resumen del Docente</h5>
                            <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                        </div>
                        <div class="modal-body">
                            @if (resumenCargado)
                            {
                                <h5>Obras</h5>
                                <ul>
                                    @foreach (var obra in resumen.Obras)
                                    {
                                        <li>@obra.TipoObra - @obra.Fecha.ToString("dd/MM/yyyy")</li>
                                    }
                                </ul>
                                <h5>Evaluaciones</h5>
                                <ul>
                                    @foreach (var eval in resumen.Evaluaciones)
                                    {
                                        <li>@eval.Periodo - @eval.PuntajeFinal% (@eval.FechaEvaluacion.ToString("dd/MM/yyyy"))</li>
                                    }
                                </ul>
                                <h5>Capacitaciones</h5>
                                <ul>
                                    @foreach (var cap in resumen.Capacitaciones)
                                    {
                                        <li>@cap.NombreCurso - @cap.DuracionHoras horas (Inicio: @cap.FechaInicio.ToString("dd/MM/yyyy"))</li>
                                    }
                                </ul>
                                <h5>Investigaciones</h5>
                                <ul>
                                    @foreach (var inv in resumen.Investigaciones)
                                    {
                                        <li>@inv.NombreProyecto - @inv.TiempoMeses meses (Inicio: @inv.FechaInicio.ToString("dd/MM/yyyy"))</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary"></div>
                                    <span class="ms-2">Cargando resumen...</span>
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (mostrarArchivos)
        {
            <div class="mt-4">
                <h5>Archivos del docente: @cedulaActual</h5>
                @if (archivosPdf?.Any() == true)
                {
                    <ul>
                        @foreach (var archivo in archivosPdf.Select((item, index) => new { item, index }))
                        {
                            <li>
                                <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => VerArchivo(archivo.index)">
                                    Ver PDF @(archivo.index + 1): @archivo.item.Nombre
                                </button>
                            </li>
                        }
                    </ul>

                    @if (archivoSeleccionadoIndex >= 0)
                    {
                        <iframe src="data:application/pdf;base64,@archivosPdf[archivoSeleccionadoIndex].PdfBase64" width="100%" height="500px"></iframe>
                    }
                }
                else
                {
                    <p>No se encontraron archivos PDF.</p>
                }
            </div>
        }
    </div>
</main>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Acerca del Sistema</h4>
            <p>Módulo administrativo del Sistema de Promoción Docente FISEI.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Soporte Técnico</h4>
            <p>admin@fisei.edu.ec<br />+593 98 765 4321</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Accesos Rápidos</h4>
            <NavLink href="/verificar"><i class="bi bi-clipboard-check-fill"></i> Verificación</NavLink><br />
            <NavLink href="/reportes-admin"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>

@code {
    private List<PostulacionDto> postulaciones;
    private UsuarioModel usuario = new();
    private bool mostrarModal = false;
    private ResumenCompletoPostulanteDto resumen = new();
    private bool resumenCargado = false;

    private List<ArchivoPdfDto> archivosPdf = new();
    private bool mostrarArchivos = false;
    private string cedulaActual = "";
    private int archivoSeleccionadoIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
            if (!string.IsNullOrWhiteSpace(cedula))
            {
                var response = await Http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/porCedula/{cedula}");
                if (response != null)
                    usuario = response;
            }

            postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar datos: " + ex.Message);
        }
    }

    private async Task CambiarEstadoAceptada(int id) => await CambiarEstado(id, "Aceptada");
    private async Task CambiarEstadoRechazada(int id) => await CambiarEstado(id, "Rechazada");

    private async Task CambiarEstado(int id, string nuevoEstado)
    {
        var response = await Http.PutAsJsonAsync($"api/Promocion/CambiarEstado/{id}", nuevoEstado);
        if (response.IsSuccessStatusCode)
        {
            if (nuevoEstado == "Rechazada")
                postulaciones.RemoveAll(p => p.Id == id);
            else
                postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
        }
    }

    private async Task MostrarResumen(string cedula)
    {
        resumenCargado = false;
        resumen = await Http.GetFromJsonAsync<ResumenCompletoPostulanteDto>($"api/Resumen/Postulante/{cedula}");
        resumenCargado = true;
        mostrarModal = true;
        await Task.Delay(100);
        await JS.InvokeVoidAsync("mostrarModal", "modalResumen");
    }

    private async void CerrarModal()
    {
        await JS.InvokeVoidAsync("cerrarModal", "modalResumen");
        mostrarModal = false;
    }

    private async Task VerPdfs(string cedula)
    {
        mostrarArchivos = false;
        archivoSeleccionadoIndex = -1;
        cedulaActual = cedula;
        archivosPdf = await Http.GetFromJsonAsync<List<ArchivoPdfDto>>($"api/Postulaciones/ArchivosPorCedula/{cedula}");
        mostrarArchivos = true;
    }

    private void VerArchivo(int index)
    {
        archivoSeleccionadoIndex = index;
    }
}