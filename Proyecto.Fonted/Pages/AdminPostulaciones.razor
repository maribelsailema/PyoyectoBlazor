@page "/adminPostulaciones"
@inject HttpClient Http
@using Proyecto.Shared.Models
@using Proyecto.Shared.Dtos
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido, @usuario.NombreCompleto (Administrador)</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio-admin" class="nav-item">
            <i class="bi bi-house-fill"></i> Inicio
        </NavLink>
        <NavLink href="/adminPostulaciones" class="nav-item">
            <i class="bi bi-clipboard-check-fill"></i> Ver Postulantes
        </NavLink>
        <NavLink href="/reportes-admin" class="nav-item">
            <i class="bi bi-bar-chart-line-fill"></i> Reportes
        </NavLink>
        <NavLink href="/perfil" class="nav-item active"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion">
            <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
        </NavLink>
    </nav>
</header>
<main class="contenido-promocion">
    <div class="container">
        <div class="text-center mb-4">
            <h2 class="titulo-admin">
                <i class="bi bi-person-lines-fill"></i> Solicitudes de Postulación
            </h2>
            <p class="text-muted">Revisa y gestiona las solicitudes enviadas por los docentes.</p>
        </div>

        @if (postulaciones == null)
        {
            <div class="text-center mt-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2">Cargando postulaciones...</p>
            </div>
        }
        else if (!postulaciones.Any())
        {
            <div class="alert alert-info text-center">No hay solicitudes de postulación.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover shadow-sm text-center">
                    <thead class="table-primary">
                        <tr>
                            <th>Cédula</th>
                            <th>Rol Actual</th>
                            <th>Rol Solicitado</th>
                            <th>Fecha</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                            <th>Resumen</th>
                            <th>PDFs</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in postulaciones)
                        {
                            <tr>
                                <td>@p.Cedula</td>
                                <td>@p.RolActual</td>
                                <td>@p.RolSolicitado</td>
                                <td>@p.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                <td>
                                    @if (p.Estado == "Aceptada")
                                    {
                                        <span class="badge bg-success">Aceptada</span>
                                    }
                                    else if (p.Estado == "Rechazada")
                                    {
                                        <span class="badge bg-danger">Rechazada</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Pendiente</span>
                                    }
                                </td>
                                <td>
                                    @if (p.Estado == "Pendiente")
                                    {
                                        <button class="btn btn-sm btn-success me-2" title="Aceptar solicitud" @onclick="() => CambiarEstadoAceptada(p.Id)">
                                            <i class="bi bi-check-circle"></i> Aceptar
                                        </button>
                                        <button class="btn btn-sm btn-danger" title="Rechazar solicitud" @onclick="() => CambiarEstadoRechazada(p.Id)">
                                            <i class="bi bi-x-circle"></i> Rechazar
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin acciones</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-outline-info btn-sm" @onclick="async () => await MostrarResumen(p.Cedula)">
                                        <i class="bi bi-file-earmark-text"></i> Ver resumen
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => VerPdfs(p.Cedula)">
                                        <i class="bi bi-file-earmark-pdf"></i> PDFs
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (mostrarArchivos)
        {
            <div class="mt-4">
                <h5>Archivos del docente: @cedulaActual</h5>
                @if (archivosPdf?.Any() == true)
                {
                    <ul>
                        @foreach (var archivo in archivosPdf.Select((item, index) => new { item, index }))
                        {
                            <li>
                                <button class="btn btn-sm btn-outline-dark me-2" @onclick="() => VerArchivo(archivo.index)">
                                    Ver PDF @(archivo.index + 1): @archivo.item.Nombre
                                </button>
                            </li>
                        }
                    </ul>

                    @if (archivoSeleccionadoIndex >= 0)
                    {
                        <iframe src="data:application/pdf;base64,@archivosPdf[archivoSeleccionadoIndex].PdfBase64" width="100%" height="500px"></iframe>
                    }
                }
                else
                {
                    <p>No se encontraron archivos PDF.</p>
                }
            </div>
        }
    </div>
</main>

@code {
    private List<PostulacionDto> postulaciones;
    private UsuarioModel usuario = new();
    private bool mostrarModal = false;
    private ResumenCompletoPostulanteDto resumen = new();
    private bool resumenCargado = false;
    [Inject] private IJSRuntime JS { get; set; }

    private List<ArchivoPdfDto> archivosPdf = new();
    private bool mostrarArchivos = false;
    private string cedulaActual = "";
    private int archivoSeleccionadoIndex = -1;

    protected override async Task OnInitializedAsync()
    {
        var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
        if (!string.IsNullOrWhiteSpace(cedula))
        {
            var response = await Http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/porCedula/{cedula}");
            if (response != null)
                usuario = response;
        }
        postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
    }

    private async Task CambiarEstadoAceptada(int id) => await CambiarEstado(id, "Aceptada");
    private async Task CambiarEstadoRechazada(int id) => await CambiarEstado(id, "Rechazada");

    private async Task CambiarEstado(int id, string nuevoEstado)
    {
        var response = await Http.PutAsJsonAsync($"api/Promocion/CambiarEstado/{id}", nuevoEstado);
        if (response.IsSuccessStatusCode)
        {
            if (nuevoEstado == "Rechazada")
            {
                var postulacionEliminada = postulaciones.FirstOrDefault(p => p.Id == id);
                if (postulacionEliminada != null)
                {
                    postulaciones.Remove(postulacionEliminada);
                }
            }
            else
            {
                postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
            }
        }
    }

    private async Task MostrarResumen(string cedula)
    {
        resumenCargado = false;
        resumen = await Http.GetFromJsonAsync<ResumenCompletoPostulanteDto>($"api/Resumen/Postulante/{cedula}");
        resumenCargado = true;
        mostrarModal = true;
        await Task.Delay(100);
        await JS.InvokeVoidAsync("mostrarModal", "modalResumen");
    }

    private async void CerrarModal()
    {
        await JS.InvokeVoidAsync("cerrarModal", "modalResumen");
        mostrarModal = false;
    }

    private async Task VerPdfs(string cedula)
    {
        mostrarArchivos = false;
        archivoSeleccionadoIndex = -1;
        cedulaActual = cedula;
        archivosPdf = await Http.GetFromJsonAsync<List<ArchivoPdfDto>>($"api/Postulaciones/ArchivosPorCedula/{cedula}");
        mostrarArchivos = true;
    }

    private void VerArchivo(int index)
    {
        archivoSeleccionadoIndex = index;
    }
}
