@page "/adminPostulaciones"
@inject HttpClient Http
@using Proyecto.Shared.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header class="navbar">
    <div class="navbar-left">
        <div class="navbar-left">
            <h3>Bienvenido, @usuario.NombreCompleto (Administrador)</h3>
        </div>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio-admin" class="nav-item">
            <i class="bi bi-house-fill"></i> Inicio
        </NavLink>
        <NavLink href="/adminPostulaciones" class="nav-item">
            <i class="bi bi-clipboard-check-fill"></i> Ver Postulantes
        </NavLink>

        <NavLink href="/reportes-admin" class="nav-item">
            <i class="bi bi-bar-chart-line-fill"></i> Reportes
        </NavLink>
          <NavLink href="/perfil" class="nav-item active"><i class="bi bi-person-fill"></i> Perfil</NavLink> 

        <NavLink href="/" class="nav-item cerrar-sesion">
            <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
        </NavLink>
    </nav>
</header>
<main class="contenido-promocion">
    <div class="container">

        <div class="text-center mb-4">
            <h2 class="titulo-admin">
                <i class="bi bi-person-lines-fill"></i> Solicitudes de Postulación
            </h2>
            <p class="text-muted">Revisa y gestiona las solicitudes enviadas por los docentes.</p>
        </div>

        @if (postulaciones == null)
        {
            <div class="text-center mt-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2">Cargando postulaciones...</p>
            </div>
        }
        else if (!postulaciones.Any())
        {
            <div class="alert alert-info text-center">No hay solicitudes de postulación.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover shadow-sm text-center">
                    <thead class="table-primary">
                        <tr>
                            <th>Cédula</th>
                            <th>Rol Actual</th>
                            <th>Rol Solicitado</th>
                            <th>Fecha</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                            <th>Resumen</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in postulaciones )
                        {
                            <tr>
                                <td>@p.Cedula</td>
                                <td>@p.RolActual</td>
                                <td>@p.RolSolicitado</td>
                                <td>@p.FechaSolicitud.ToString("dd/MM/yyyy")</td>
                                <td>
                                    @if (p.Estado == "Aceptada")
                                    {
                                        <span class="badge bg-success">Aceptada</span>
                                    }
                                    else if (p.Estado == "Rechazada")
                                    {
                                        <span class="badge bg-danger">Rechazada</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Pendiente</span>
                                    }
                                </td>
                                <td>
                                    @if (p.Estado == "Pendiente")
                                    {
                                        <button class="btn btn-sm btn-success me-2"
                                                title="Aceptar solicitud"
                                                @onclick="() => CambiarEstadoAceptada(p.Id)">
                                            <i class="bi bi-check-circle"></i> Aceptar
                                        </button>
                                        <button class="btn btn-sm btn-danger"
                                                title="Rechazar solicitud"
                                                @onclick="() => CambiarEstadoRechazada(p.Id)">
                                            <i class="bi bi-x-circle"></i> Rechazar
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin acciones</span>
                                    }
                                </td>
                                <td>

                                    <button class="btn btn-outline-info btn-sm"
                                            @onclick="async () => await MostrarResumen(p.Cedula)">
                                        <i class="bi bi-file-earmark-text"></i> Ver resumen
                                    </button>


                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        @if (mostrarModal)
        {
            <div class="modal fade" id="modalResumen" tabindex="-1" aria-labelledby="modalResumenLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalResumenLabel">Resumen del Docente</h5>
                            <button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Cerrar"></button>
                        </div>
                        <div class="modal-body">
                            @if (resumenCargado)
{
    <h5>Obras</h5>
    <ul>
        @foreach (var obra in resumen.Obras)
        {
            <li>@obra.TipoObra - @obra.Fecha.ToString("dd/MM/yyyy")</li>
        }
    </ul>
    
    <h5>Evaluaciones</h5>
    <ul>
        @foreach (var eval in resumen.Evaluaciones)
        {
            <li>@eval.Periodo - @eval.PuntajeFinal% (@eval.FechaEvaluacion.ToString("dd/MM/yyyy"))</li>
        }
    </ul>
    
    <h5>Capacitaciones</h5>
    <ul>
        @foreach (var cap in resumen.Capacitaciones)
        {
            <li>@cap.NombreCurso - @cap.DuracionHoras horas (Inicio: @cap.FechaInicio.ToString("dd/MM/yyyy"))</li>
        }
    </ul>
    
    <h5>Investigaciones</h5>
    <ul>
        @foreach (var inv in resumen.Investigaciones)
        {
            <li>@inv.NombreProyecto - @inv.TiempoMeses meses (Inicio: @inv.FechaInicio.ToString("dd/MM/yyyy"))</li>
        }
    </ul>
}
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border text-primary" role="status"></div>
                                    <span class="ms-2">Cargando resumen...</span>
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</main>
<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Acerca del Sistema</h4>
            <p>Módulo administrativo del Sistema de Promoción Docente FISEI.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Soporte Técnico</h4>
            <p>admin@fisei.edu.ec<br>+593 98 765 4321</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Accesos Rápidos</h4>
            <NavLink href="/verificar"><i class="bi bi-clipboard-check-fill"></i> Verificación</NavLink><br />
            <NavLink href="/reportes-admin"><i class="bi bi-bar-chart-line-fill"></i> Reportes</NavLink><br />

        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>
@code {
    private bool mostrarModal = false;

    private List<PostulacionDto> postulaciones;
    private UsuarioModel usuario = new();
    private bool isLoading = true;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar usuario
            var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
            if (!string.IsNullOrWhiteSpace(cedula))
            {
                var response = await Http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/porCedula/{cedula}");
                if (response != null)
                    usuario = response;
            }

            // Cargar postulaciones
            postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CambiarEstadoAceptada(int id) => await CambiarEstado(id, "Aceptada");
    private async Task CambiarEstadoRechazada(int id) => await CambiarEstado(id, "Rechazada");

    private async Task CambiarEstado(int id, string nuevoEstado)
    {
        var response = await Http.PutAsJsonAsync($"api/Promocion/CambiarEstado/{id}", nuevoEstado);
        if (response.IsSuccessStatusCode)
        {
           
            if (nuevoEstado == "Rechazada")
        {
            // Quitar de la lista sin volver a consultar toda la API
            var postulacionEliminada = postulaciones.FirstOrDefault(p => p.Id == id);
            if (postulacionEliminada != null)
            {
                postulaciones.Remove(postulacionEliminada);
            }
        }
        else
        {
            // Para "Aceptada", recarga completa
            postulaciones = await Http.GetFromJsonAsync<List<PostulacionDto>>("api/Promocion/Todas");
        }

        StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error al actualizar estado: {response.StatusCode}");
        }
    }

    private ResumenCompletoPostulanteDto resumen = new ();
private bool resumenCargado = false;
    [Inject] private IJSRuntime JS { get; set; }

    private async Task MostrarResumen(string cedula)
    {
        resumenCargado = false;
        try
        {
            resumen = await Http.GetFromJsonAsync<ResumenCompletoPostulanteDto>($"api/Resumen/Postulante/{cedula}");
            resumenCargado = true;
            mostrarModal = true; // <- ¡esto es esencial!

            StateHasChanged(); // Forzar renderizado antes del JS

            await Task.Delay(100);
            await JS.InvokeVoidAsync("mostrarModal", "modalResumen");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error cargando resumen: " + ex.Message);
        }
    }

    private async void CerrarModal()
    {
        await JS.InvokeVoidAsync("cerrarModal", "modalResumen");
        mostrarModal = false;
    }



    

}


}
