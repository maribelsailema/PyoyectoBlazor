@page "/perfil"
@using System.ComponentModel.DataAnnotations

<Header />

<div class="page-content-wrapper">
    @* Nuevo contenedor para el contenido principal *@
    <div class="profile-card">
        @* Cambiado a profile-card para mejor semántica con los estilos *@
        <h3 class="profile-title"><i class="bi bi-person-badge"></i> Perfil de Usuario</h3>

        <div class="profile-actions">
            <button class="btn btn-primary" @onclick="MostrarModalAgregar">
                <i class="bi bi-plus-circle"></i> Agregar
            </button>
            <button class="btn btn-secondary" @onclick="MostrarModalImportar">
                <i class="bi bi-cloud-download"></i> Importar / Cargar
            </button> @* Cambiado el icono y texto para ser más genérico para "cargar datos" *@
            <button class="btn btn-danger" @onclick="EliminarSeleccionado" disabled="@(Seleccionado == null)">
                <i class="bi bi-trash"></i> Eliminar
            </button>
        </div>

        @if (Datos.Any())
        {
            <div class="profile-table-container">
                <table class="profile-table">
                    <thead>
                        <tr>
                            <th>Universidad</th>
                            <th>Tiempo</th>
                            <th>Obras</th>
                            <th>Puntaje Eva.</th>
                            <th>Horas Cap.</th>
                            <th>Investigación</th>
                            <th class="text-center">Acciones</th> @* Centrar el encabezado de acciones *@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dato in Datos)
                        {
                            <tr class="@(dato == Seleccionado ? "selected-row" : null)"
                                @onclick="() => SeleccionarFila(dato)">
                                <td>@dato.Universidad</td>
                                <td>@dato.Tiempo años</td>
                                <td>@dato.Obras</td>
                                <td>@dato.Puntaje.ToString("0.0") %</td>
                                <td>@dato.Horas</td>
                                <td>@dato.Investigacion meses</td>
                                <td class="table-actions">
                                    @* Nueva clase para la celda de acciones *@
                                    <button class="btn-edit" @onclick:stopPropagation @onclick="@(e => Editar(dato, e))">
                                        <i class="bi bi-pencil"></i> Editar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="no-data">
                <i class="bi bi-database-exclamation"></i>
                <p>No hay datos registrados. ¡Usa el botón "Agregar" o "Importar" para empezar!</p>
            </div>
        }
    </div> @* Fin .profile-card *@
</div> @* Fin .page-content-wrapper *@


@if (ModalAgregarVisible)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            @* Centrar el modal verticalmente *@
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-plus-circle"></i> Agregar Datos</h5>
                    <button type="button" class="btn-close" @onclick="() => ModalAgregarVisible = false" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="NuevoDato" OnValidSubmit="GuardarNuevoDato">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Universidad</label>
                            <InputText class="form-control" @bind-Value="NuevoDato.Universidad" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tiempo (años)</label>
                            <InputNumber class="form-control" @bind-Value="NuevoDato.Tiempo" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Número de Obras</label>
                            <InputNumber class="form-control" @bind-Value="NuevoDato.Obras" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Puntaje de Evaluación (%)</label>
                            <InputNumber class="form-control" @bind-Value="NuevoDato.Puntaje" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Horas de Capacitación</label>
                            <InputNumber class="form-control" @bind-Value="NuevoDato.Horas" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tiempo en Investigación (meses)</label>
                            <InputNumber class="form-control" @bind-Value="NuevoDato.Investigacion" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => ModalAgregarVisible = false">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Guardar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (ModalEditarVisible && EditandoDato != null)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-pencil-square"></i> Editar Datos</h5>
                    <button type="button" class="btn-close" @onclick="() => ModalEditarVisible = false" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="EditandoDato" OnValidSubmit="ActualizarDato">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Universidad</label>
                            <InputText class="form-control" @bind-Value="EditandoDato.Universidad" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tiempo (años)</label>
                            <InputNumber class="form-control" @bind-Value="EditandoDato.Tiempo" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Número de Obras</label>
                            <InputNumber class="form-control" @bind-Value="EditandoDato.Obras" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Puntaje de Evaluación (%)</label>
                            <InputNumber class="form-control" @bind-Value="EditandoDato.Puntaje" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Horas de Capacitación</label>
                            <InputNumber class="form-control" @bind-Value="EditandoDato.Horas" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Tiempo en Investigación (meses)</label>
                            <InputNumber class="form-control" @bind-Value="EditandoDato.Investigacion" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => ModalEditarVisible = false">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Actualizar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>

}

@if (ModalImportarVisible)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-cloud-arrow-up"></i> Importar / Cargar Datos</h5> @* Icono más apropiado para cargar *@
                    <button type="button" class="btn-close" @onclick="() => ModalImportarVisible = false" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Selecciona una fuente para importar o cargar datos académicos automáticamente.</p>
                    <div class="mb-3">
                        <label class="form-label">Fuente de datos:</label>
                        <select class="form-select" @bind="FuenteImportacion">
                            <option value="senecyt">SENESCYT</option>
                            <option value="ministerio">Ministerio de Educación</option>
                            <option value="otra">Otra Universidad</option>
                            <option value="archivo">Cargar desde archivo (.csv, .xlsx)</option> @* Opción para cargar desde archivo *@
                        </select>
                    </div>

                    @if (FuenteImportacion == "archivo")
                    {
                        <div class="mb-3 file-upload-area">
                            @* Área para cargar archivo *@
                            <label class="form-label">Arrastra o haz clic para cargar un archivo:</label>
                            <InputFile OnChange="HandleFileSelection" />
                            @if (!string.IsNullOrEmpty(FileName))
                            {
                                <p class="mt-2 text-success"><i class="bi bi-check-circle-fill"></i> Archivo seleccionado: @FileName</p>
                            }
                            else
                            {
                                <p class="mt-2 text-muted">Formatos soportados: .csv, .xlsx</p>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ModalImportarVisible = false">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="ImportarDatos" disabled="@(FuenteImportacion == "archivo" && !FileSelected)">
                        <i class="bi bi-upload"></i> Cargar Datos
                    </button> @* Cambiado el texto y habilitado/deshabilitado según archivo *@
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    public class DatoAcademico
    {
        [Required(ErrorMessage = "La universidad es obligatoria.")]
        public string Universidad { get; set; } = string.Empty;

        [Range(0, 100, ErrorMessage = "El tiempo debe estar entre 0 y 100 años.")]
        public int Tiempo { get; set; }

        [Range(0, 50, ErrorMessage = "Las obras deben ser un número entre 0 y 50.")]
        public int Obras { get; set; }

        [Range(0.0, 100.0, ErrorMessage = "El puntaje debe estar entre 0.0 y 100.0.")]
        public double Puntaje { get; set; }

        [Range(0, 500, ErrorMessage = "Las horas deben estar entre 0 y 500.")]
        public int Horas { get; set; }

        [Range(0, 60, ErrorMessage = "La investigación debe estar entre 0 y 60 meses.")]
        public int Investigacion { get; set; }
    }

    private List<DatoAcademico> Datos = new();
    private DatoAcademico? Seleccionado;
    private DatoAcademico NuevoDato = new();
    private DatoAcademico? EditandoDato;

    private bool ModalAgregarVisible = false;
    private bool ModalEditarVisible = false;
    private bool ModalImportarVisible = false;
    private string FuenteImportacion = "senecyt";
    private IBrowserFile? SelectedFile; // Para manejar la carga de archivos
    private string FileName = string.Empty; // Para mostrar el nombre del archivo seleccionado
    private bool FileSelected => SelectedFile != null;


    private void MostrarModalAgregar()
    {
        NuevoDato = new DatoAcademico(); // Resetear el formulario al abrir el modal
        ModalAgregarVisible = true;
    }
    private void MostrarModalImportar()
    {
        FuenteImportacion = "senecyt"; // Reiniciar la fuente de importación al abrir
        SelectedFile = null; // Reiniciar el archivo seleccionado
        FileName = string.Empty;
        ModalImportarVisible = true;
    }

    private void GuardarNuevoDato()
    {
        Datos.Add(new DatoAcademico
            {
                Universidad = NuevoDato.Universidad,
                Tiempo = NuevoDato.Tiempo,
                Obras = NuevoDato.Obras,
                Puntaje = NuevoDato.Puntaje,
                Horas = NuevoDato.Horas,
                Investigacion = NuevoDato.Investigacion
            });
        NuevoDato = new();
        ModalAgregarVisible = false;
        StateHasChanged(); // Forzar la actualización de la UI
    }

    private void SeleccionarFila(DatoAcademico dato)
    {
        Seleccionado = dato;
    }

    private void EliminarSeleccionado()
    {
        if (Seleccionado != null)
        {
            Datos.Remove(Seleccionado);
            Seleccionado = null;
            StateHasChanged(); // Forzar la actualización de la UI
        }
    }

    private void Editar(DatoAcademico dato, MouseEventArgs e)
    {
        // Se crea una copia para que la edición no afecte el objeto original hasta que se guarde
        EditandoDato = new DatoAcademico
            {
                Universidad = dato.Universidad,
                Tiempo = dato.Tiempo,
                Obras = dato.Obras,
                Puntaje = dato.Puntaje,
                Horas = dato.Horas,
                Investigacion = dato.Investigacion
            };
        Seleccionado = dato; // Mantener la referencia al original para actualizarlo
        ModalEditarVisible = true;
    }

    private void ActualizarDato()
    {
        if (EditandoDato != null && Seleccionado != null)
        {
            // Actualizar las propiedades del objeto original 'Seleccionado' con los valores de 'EditandoDato'
            Seleccionado.Universidad = EditandoDato.Universidad;
            Seleccionado.Tiempo = EditandoDato.Tiempo;
            Seleccionado.Obras = EditandoDato.Obras;
            Seleccionado.Puntaje = EditandoDato.Puntaje;
            Seleccionado.Horas = EditandoDato.Horas;
            Seleccionado.Investigacion = EditandoDato.Investigacion;
            ModalEditarVisible = false;
            StateHasChanged(); // Forzar la actualización de la UI
        }
    }

    private async Task ImportarDatos()
    {
        if (FuenteImportacion == "archivo" && SelectedFile != null)
        {
            // Aquí iría la lógica real para procesar el archivo.
            // Por simplicidad, solo agregamos un dato de ejemplo.
            // En una aplicación real, leerías el contenido del archivo.
            var datoImportadoFromFile = new DatoAcademico
                {
                    Universidad = $"Datos de Archivo: {FileName}",
                    Tiempo = 2,
                    Obras = 1,
                    Puntaje = 85.0,
                    Horas = 40,
                    Investigacion = 6
                };
            Datos.Add(datoImportadoFromFile);
            Console.WriteLine($"Archivo {FileName} simulado como importado.");
        }
        else
        {
            var dato = FuenteImportacion switch
            {
                "senecyt" => new DatoAcademico { Universidad = "SENESCYT", Tiempo = 5, Obras = 4, Puntaje = 97.5, Horas = 120, Investigacion = 18 },
                "ministerio" => new DatoAcademico { Universidad = "Ministerio Educación", Tiempo = 3, Obras = 2, Puntaje = 96.0, Horas = 100, Investigacion = 15 },
                _ => new DatoAcademico { Universidad = "Universidad Desconocida", Tiempo = 4, Obras = 3, Puntaje = 90.0, Horas = 80, Investigacion = 12 }
            };
            Datos.Add(dato);
        }

        ModalImportarVisible = false;
        StateHasChanged(); // Forzar la actualización de la UI
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        FileName = e.File.Name;
        // Aquí podrías añadir validaciones de tamaño o tipo de archivo si fuera necesario
    }


    private UsuarioModel usuario = new();

    protected override void OnInitialized()
    {
        usuario = new UsuarioModel { Nombre = "Docente Ejemplo" }; // Simulación de usuario logueado
        // Opcional: Cargar algunos datos de ejemplo al inicio
        Datos.Add(new DatoAcademico { Universidad = "Universidad de Quito", Tiempo = 7, Obras = 5, Puntaje = 98.2, Horas = 150, Investigacion = 24 });
        Datos.Add(new DatoAcademico { Universidad = "Escuela Politécnica", Tiempo = 3, Obras = 2, Puntaje = 92.5, Horas = 80, Investigacion = 12 });
    }

    public class UsuarioModel
    {
        public string Nombre { get; set; } = string.Empty;
    }
}
<Footer/>