@page "/importar-evaluacion"
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="p-4 sm:p-6 lg:p-8 bg-gray-100 min-h-screen font-sans antialiased">
    <header class="bg-white shadow-lg rounded-lg mb-8 py-4 px-6 flex flex-col sm:flex-row justify-between items-center">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-4 sm:mb-0">Importar Evaluación Docente</h1>
        <nav class="flex space-x-4">
            <a href="/" class="text-blue-600 hover:text-blue-800 font-semibold px-3 py-1 rounded-md transition-colors duration-200">Inicio</a>
            <a href="/promocion" class="text-blue-600 hover:text-blue-800 font-semibold px-3 py-1 rounded-md transition-colors duration-200">Promoción</a>
            <a href="/perfil" class="text-blue-600 hover:text-blue-800 font-semibold px-3 py-1 rounded-md transition-colors duration-200">Perfil</a>
            <a href="/exportar" class="text-blue-600 hover:text-blue-800 font-semibold px-3 py-1 rounded-md transition-colors duration-200">Exportar</a>
            <a href="/cerrar-sesion" class="text-red-600 hover:text-red-800 font-semibold px-3 py-1 rounded-md transition-colors duration-200">Cerrar Sesión</a>
        </nav>
    </header>

    <div class="bg-white shadow-md rounded-xl p-6 sm:p-8">
        <div class="mb-6 pb-4 border-b border-gray-200 flex flex-col sm:flex-row items-start sm:items-center justify-between">
            <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4 sm:mb-0">Importar Archivo de Evaluación</h2>
            <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
                <InputFile OnChange="HandleFileSelected" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
                <button @onclick="TriggerFileUpload" class="btn bg-blue-600 hover:bg-blue-700 text-white px-5 py-2 rounded-lg font-medium shadow-md transition-colors duration-200">
                    Importar
                </button>
            </div>
            @if (!string.IsNullOrEmpty(uploadMessage))
            {
                <p class="mt-3 text-sm font-medium @(uploadMessage.Contains("éxito") ? "text-green-600" : "text-red-600")">@uploadMessage</p>
            }
        </div>

        <div class="mb-8 text-right">
            <button @onclick="AddNewEvaluacion" class="btn bg-green-600 hover:bg-green-700 text-white px-5 py-2 rounded-lg font-medium shadow-md flex items-center justify-center space-x-2 ml-auto transition-colors duration-200">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                <span>Agregar Evaluación</span>
            </button>
        </div>

        <h2 class="text-xl sm:text-2xl font-semibold text-gray-800 mb-4">Evaluaciones Registradas</h2>
        @if (evaluaciones == null)
        {
            <p class="text-gray-600">Cargando evaluaciones...</p>
        }
        else if (!evaluaciones.Any())
        {
            <p class="text-gray-600">No hay evaluaciones registradas aún. ¡Agrega una nueva o importa un archivo!</p>
        }
        else
        {
            <div class="overflow-x-auto rounded-lg shadow-sm border border-gray-200">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tl-lg">ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cédula</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Periodo</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Puntaje Final</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Evaluación</th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tr-lg">Acciones</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var eval in evaluaciones)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@eval.IdEval</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-800">@eval.Cedula</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-800">@eval.Periodo</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-800">@eval.PuntajeFinal</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-800">@eval.FechaEvaluacion.ToShortDateString()</td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium text-center">
                                    @if (!string.IsNullOrEmpty(eval.PdfPath))
                                    {
                                        <a href="@eval.PdfPath" target="_blank" class="text-blue-600 hover:text-blue-900 font-semibold inline-flex items-center">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.132l-3.35 3.35a1.5 1.5 0 01-2.121 0l-1.5-1.5a1.5 1.5 0 010-2.121l3.35-3.35m-1.5 1.5l3.35 3.35a1.5 1.5 0 002.121 0l1.5-1.5a1.5 1.5 0 000-2.121l-3.35-3.35"></path></svg>
                                            Ver PDF
                                        </a>
                                    }
                                    <button @onclick="(() => EditEvaluacion(eval.IdEval))" class="ml-4 text-yellow-600 hover:text-yellow-900 font-semibold inline-flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                        Editar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private string uploadMessage = "";
    private IBrowserFile? selectedFile;
    private List<EvaluacionesDocente> evaluaciones = new();

    public class EvaluacionesDocente
    {
        public int IdEval { get; set; }
        public string Cedula { get; set; } = string.Empty;
        public string Periodo { get; set; } = string.Empty;
        public decimal PuntajeFinal { get; set; }
        public DateTime FechaEvaluacion { get; set; }
        public string? PdfPath { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEvaluaciones();
    }

    private async Task LoadEvaluaciones()
    {
        try
        {
            evaluaciones = new List<EvaluacionesDocente>
            {
                new() { IdEval = 1, Cedula = "1710000001", Periodo = "2024-1", PuntajeFinal = 95.5M, FechaEvaluacion = new DateTime(2024, 7, 15), PdfPath = "https://example.com/eval_juan.pdf" },
                new() { IdEval = 2, Cedula = "1710000002", Periodo = "2024-1", PuntajeFinal = 88.0M, FechaEvaluacion = new DateTime(2024, 7, 20), PdfPath = "https://example.com/eval_maria.pdf" },
                new() { IdEval = 3, Cedula = "1710000003", Periodo = "2024-2", PuntajeFinal = 75.2M, FechaEvaluacion = new DateTime(2024, 12, 10), PdfPath = null }
            };
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error al cargar evaluaciones: {ex.Message}";
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        uploadMessage = $"Archivo seleccionado: {selectedFile?.Name}";
    }

    private async Task TriggerFileUpload()
    {
        if (selectedFile == null)
        {
            uploadMessage = "Por favor, selecciona un archivo primero.";
            return;
        }

        try
        {
            const long maxAllowedSize = 10_000_000;
            if (selectedFile.Size > maxAllowedSize)
            {
                uploadMessage = $"Archivo muy grande (máx {maxAllowedSize / 1_000_000}MB).";
                return;
            }

            using var content = new MultipartFormDataContent();
            var fileStream = selectedFile.OpenReadStream(maxAllowedSize);
            var fileContent = new StreamContent(fileStream)
            {
                Headers = { ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType) }
            };
            content.Add(fileContent, "archivo", selectedFile.Name);

            var response = await Http.PostAsync($"{NavManager.BaseUri}api/evaluacion/importar", content);

            if (response.IsSuccessStatusCode)
            {
                uploadMessage = "Archivo cargado con éxito.";
                await LoadEvaluaciones();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                uploadMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            uploadMessage = $"Error inesperado: {ex.Message}";
        }
    }

    private void AddNewEvaluacion()
    {
        uploadMessage = "Funcionalidad 'Agregar Evaluación' pendiente.";
    }

    private void EditEvaluacion(int id)
    {
        uploadMessage = $"Funcionalidad 'Editar Evaluación {id}' pendiente.";
    }
}
