@page "/inicio-admin"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS

<Header_Admin/>

<h2 class="text-center text-black mb-5">Sistema del Administrador</h2>


@* 
<div class="container my-5">
    <div class="skills-container">
        <h2 class="text-center text-white mb-5">Estadísticas del Sistema</h2>
        <div class="row justify-content-center">
            @foreach (var estadistica in estadisticas)
            {
                <div class="col-sm-6 col-md-4 mb-4">
                    <div class="skill-item mx-auto animated show">
                        <svg class="skill-circle" viewBox="0 0 160 160">
                            <defs>
                                <linearGradient id="@($"gradient-{estadistica.Titulo}")" x1="1" y1="0" x2="0" y2="1">
                                    <stop offset="0%" stop-color="#4a6cf7" />
                                    <stop offset="100%" stop-color="#2541b2" />
                                </linearGradient>
                            </defs>
                            <circle class="bg" cx="80" cy="80" r="70"></circle>
                            <circle class="progress" cx="80" cy="80" r="70"
                                    stroke="url(#@($"gradient-{estadistica.Titulo}"))"
                                    @ref="estadistica.RefProgressCircle"
                                    stroke-dasharray="440"
                                    stroke-dashoffset="440">
                            </circle>
                        </svg>
                        <div class="skill-text">
                            <div class="skill-percent">@estadistica.PorcentajeActual%</div>
                            <div class="skill-name">@estadistica.Titulo</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
*@

<Footer_Admin/>

@code {
    private UsuarioModel usuario = new();
    private List<Estadistica> estadisticas = new()
    {
        new Estadistica { Titulo = "Verificaciones", Porcentaje = 90 },
        new Estadistica { Titulo = "Reportes", Porcentaje = 85 },
        new Estadistica { Titulo = "Gestión BD", Porcentaje = 80 },
    };

    protected override async Task OnInitializedAsync()
    {
        usuario = await Http.GetFromJsonAsync<UsuarioModel>("https://tu-api.com/api/usuario/actual");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var est in estadisticas)
            {
                await AnimarProgreso(est);
            }
        }
    }

    private async Task AnimarProgreso(Estadistica est)
    {
        const double circ = 440;
        for (int i = 0; i <= est.Porcentaje; i++)
        {
            est.PorcentajeActual = i;
            var offset = circ - (circ * i) / 100;
            await JS.InvokeVoidAsync("setStrokeDashOffset", est.RefProgressCircle, offset);
            StateHasChanged();
            await Task.Delay(10);
        }
    }

    public class UsuarioModel
    {
        public string Nombre { get; set; } = string.Empty;
    }

    public class Estadistica
    {
        public string Titulo { get; set; } = "";
        public int Porcentaje { get; set; }
        public int PorcentajeActual { get; set; } = 0;
        public ElementReference RefProgressCircle { get; set; }
    }
}