@page "/estado-promocion"
@inject NavigationManager Navigation

<style>
    /* Variables de color rojo */
    :root {
        --primary-red: #8B0000;
        --secondary-red: #a52a2a;
        --dark-red: #700000;
        --light-red: #ffcccc;
        --text-dark: #1f2937;
        --text-light: #f9fafb;
        --background-light: #f5f5f5;
        --border-radius: 8px;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --hover-shadow: 0 6px 12px rgba(139, 0, 0, 0.3);

        /* Colores específicos para Bootstrap, armonizados con el tema */
        --bs-primary: var(--primary-red); /* Sobrescribe el primary de Bootstrap con nuestro rojo */
        --bs-success: #28a745; /* Verde para éxito */
        --bs-danger: #dc3545; /* Rojo para peligro */
        --bs-warning: #ffc107; /* Amarillo/naranja para advertencia */
        --bs-info: #17a2b8; /* Cian para información */
        --bs-secondary: #6c757d; /* Gris para secundario */
    }

    body {
        background-color: var(--background-light);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 2rem; /* Añade un padding general al cuerpo para separación */
        min-height: 100vh;
        color: var(--text-dark);
    }

    h3, h4 {
        color: var(--primary-red);
        font-weight: 600;
        margin-bottom: 1rem;
    }

    /* Estilo de la tarjeta (card) */
    .card {
        border: 1px solid rgba(0,0,0,.125); /* Borde por defecto de Bootstrap */
        border-radius: var(--border-radius);
    }

    .card-header.bg-primary {
        background-color: var(--primary-red) !important;
        color: var(--text-light) !important;
        border-bottom: 1px solid var(--primary-red);
    }

    /* Estilo de las insignias (badges) */
    .badge.bg-success {
        background-color: var(--bs-success) !important;
        color: white !important;
    }

    .badge.bg-warning {
        background-color: var(--bs-warning) !important;
        color: var(--text-dark) !important;
    }

    .badge.bg-danger {
        background-color: var(--bs-danger) !important;
        color: white !important;
    }

    .badge.bg-secondary {
        background-color: var(--bs-secondary) !important;
        color: white !important;
    }

    /* Estilo de las alertas */
    .alert.alert-danger {
        background-color: #f8d7da; /* Rojo más claro para el fondo de la alerta */
        color: #721c24; /* Rojo más oscuro para el texto de la alerta */
        border-color: #f5c6cb;
    }

    .alert.alert-success {
        background-color: #d4edda; /* Verde más claro para el fondo de la alerta */
        color: #155724; /* Verde más oscuro para el texto de la alerta */
        border-color: #c3e6cb;
    }

    /* Estilo de los botones */
    .btn-primary {
        background-color: var(--primary-red);
        border-color: var(--primary-red);
        color: white;
        transition: all 0.3s ease;
    }
    .btn-primary:hover {
        background-color: var(--secondary-red) !important;
        border-color: var(--secondary-red) !important;
    }

    .btn-danger {
        background-color: var(--bs-danger);
        border-color: var(--bs-danger);
        color: white;
        transition: all 0.3s ease;
    }
    .btn-danger:hover {
        background-color: #c82333 !important; /* Rojo peligro más oscuro */
        border-color: #bd2130 !important;
    }

    .btn-sm { /* Asegura que los botones pequeños hereden estilos consistentes */
        padding: .25rem .5rem;
        font-size: .875rem;
        border-radius: .2rem;
    }

    /* Asegura que los colores de texto sean consistentes donde Bootstrap podría sobrescribir */
    .text-primary {
        color: var(--primary-red) !important;
    }
    /* Añade un padding general para el contenido principal para evitar que toque los bordes */
    .container {
        padding: 0 15px; /* Padding estándar de contenedor de Bootstrap */
        max-width: 960px; /* Ajusta si es necesario, o deja que Bootstrap lo maneje */
        margin: 0 auto; /* Centra el contenedor */
    }
</style>

<h3>Estado de Mi Postulación a Promoción</h3>

<AlertMessage Message="@statusMessage" AlertType="@alertType" />

@if (applicationStatus != null)
{
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            Detalles de la Postulación
        </div>
        <div class="card-body">
            <p><strong>Nivel Postulado:</strong> @applicationStatus.NivelPostulado</p>
            <p><strong>Fecha de Postulación:</strong> @applicationStatus.FechaPostulacion.ToShortDateString()</p>
            <p>
                <strong>Estado Actual:</strong>
                <span class="badge bg-@(GetStatusBadgeClass(applicationStatus.Estado))">@applicationStatus.Estado</span>
            </p>
            @if (!string.IsNullOrEmpty(applicationStatus.Observaciones))
            {
                <p><strong>Observaciones:</strong> @applicationStatus.Observaciones</p>
            }
            @if (applicationStatus.FechaAprobacion.HasValue)
            {
                <p><strong>Fecha de Aprobación/Rechazo:</strong> @applicationStatus.FechaAprobacion.Value.ToShortDateString()</p>
            }
        </div>
    </div>

    <h4>Documentos Requeridos y Subidos</h4>
    <ul class="list-group mb-4">
        @foreach (var doc in applicationStatus.DocumentosRequeridos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @doc.NombreDocumento
                @if (doc.EstaEnviado)
                {
                    <span class="badge bg-success">Enviado <i class="bi bi-check-circle-fill ms-1"></i></span>
                }
                else
                {
                    <span class="badge bg-warning">Pendiente <i class="bi bi-exclamation-circle-fill ms-1"></i></span>
                }
            </li>
        }
    </ul>

    @if (applicationStatus.Estado == "Rechazado")
    {
        <div class="alert alert-danger" role="alert">
            Su postulación ha sido rechazada. Por favor, revise las observaciones y sus documentos.
            <button class="btn btn-sm btn-danger ms-2" @onclick="GoToPerfil">Revisar Documentos</button>
        </div>
    }
    else if (applicationStatus.Estado == "Aprobado")
    {
        <div class="alert alert-success" role="alert">
            ¡Felicidades! Su postulación ha sido aprobada.
        </div>
    }
}
else
{
    <p>No se encontró ninguna postulación activa. ¡Empiece el proceso de promoción!</p>
    <button class="btn btn-primary" @onclick="GoToPromocion">Ir a Proceso de Promoción</button>
}

@code {
    private string statusMessage = string.Empty;
    private string alertType = "info";
    private ApplicationStatusModel applicationStatus;

    protected override void OnInitialized()
    {
        // SIMULACIÓN DE DATOS PARA EL FRONTEND
        applicationStatus = new ApplicationStatusModel
        {
            NivelPostulado = "Docente Asociado 2",
            FechaPostulacion = DateTime.Now.AddDays(-10),
            Estado = "Revisión", // O "Aprobado", "Rechazado" para probar la UI
            Observaciones = "Pendiente de verificación de publicaciones.",
            FechaAprobacion = null,
            DocumentosRequeridos = new List<RequiredDocumentStatus>
            {
                new RequiredDocumentStatus { NombreDocumento = "Título de PhD", EstaEnviado = true },
                new RequiredDocumentStatus { NombreDocumento = "Certificado de Publicaciones", EstaEnviado = false },
                new RequiredDocumentStatus { NombreDocumento = "Currículum Vitae", EstaEnviado = true }
            }
        };
        // Si quieres simular que no hay postulación activa:
        // applicationStatus = null;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Revisión" => "warning",
            "Aprobado" => "success",
            "Rechazado" => "danger",
            _ => "secondary"
        };
    }

    private void GoToPromocion()
    {
        Navigation.NavigateTo("/promocion");
    }

    private void GoToPerfil()
    {
        Navigation.NavigateTo("/perfil");
    }

    // Modelos de datos para el frontend
    public class ApplicationStatusModel
    {
        public string NivelPostulado { get; set; } = string.Empty;
        public DateTime FechaPostulacion { get; set; }
        public string Estado { get; set; } = string.Empty;
        public string Observaciones { get; set; } = string.Empty;
        public DateTime? FechaAprobacion { get; set; }
        public List<RequiredDocumentStatus> DocumentosRequeridos { get; set; } = new();
    }

    public class RequiredDocumentStatus
    {
        public string NombreDocumento { get; set; } = string.Empty;
        public bool EstaEnviado { get; set; }
    }
}