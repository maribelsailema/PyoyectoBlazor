@page "/exportar"
@using Proyecto.Fonted.Services
@using Proyecto.Frontend.Services
@inject IJSRuntime JS
@inject InvestigacionService investigacionService
@using Proyecto.Shared
@using Proyecto.Shared.Models
@inject IJSRuntime JS
@inject CarreraService carreraService
@inject IJSRuntime JS


@inject CapacitacionesService capacitacionesService  
@inject ObraService obraService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject EvaluacionDocenteService evaluacionService



<style>
    /* Estilos específicos para la página de exportación */
    .export-container {
    max-width: 1200px;
    margin: var(--spacing-xl) auto;
    padding: 0 var(--spacing-md);
    }

    .export-title {
    color: var(--primary-color);
    margin-bottom: var(--spacing-lg);
    font-size: 1.8rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    }

    .export-card {
    background-color: var(--card-bg-color);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-md);
    padding: var(--spacing-xl);
    margin-bottom: var(--spacing-lg);
    }

    .export-filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    }

    .filter-group {
    margin-bottom: var(--spacing-md);
    }

    .filter-label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--dark-text-color);
    }

    .form-select, .form-control {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    font-size: 1rem;
    transition: var(--transition-normal);
    background-color: var(--light-bg-color);
    }

    .form-select:focus, .form-control:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
    outline: none;
    background-color: var(--card-bg-color);
    }

    .export-button {
    display: flex;
    align-items: flex-end;
    }

    .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    text-decoration: none;
    box-shadow: var(--shadow-sm);
    }

    .btn-primary {
    background-color: var(--secondary-color);
    color: white;
    }

    .btn-primary:hover {
    background-color: darken(var(--secondary-color), 8%);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    }

    .additional-filters {
    background-color: var(--light-bg-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
    color: var(--primary-color);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    }

    .filter-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    }

    .filter-item {
    margin-bottom: var(--spacing-sm);
    }

    /* Ocultar filtros específicos inicialmente */
    .usuario-filters, .evaluacion-filters {
    display: none;
    }

    /* Mostrar filtros según la selección (esto se manejaría con JS) */
    select.form-select[value="Usuarios"] ~ .additional-filters .usuario-filters {
    display: grid;
    }

    select.form-select[value="EvaluacionesDocentes"] ~ .additional-filters .evaluacion-filters {
    display: grid;
    }
</style>

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio" class="nav-item">
            <i class="bi bi-house-fill"></i> Inicio
        </NavLink>
        <NavLink href="/promocion" class="nav-item">
            <i class="bi bi-bar-chart-line-fill"></i> Promoción
        </NavLink>
        <NavLink href="/perfil" class="nav-item">
            <i class="bi bi-person-fill"></i> Perfil
        </NavLink>
        <NavLink href="/exportar" class="nav-item active">
            <i class="bi bi-download"></i> Agregar Documento
        </NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion">
            <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
        </NavLink>
    </nav>
</header>

<div class="export-container">
    <h3 class="export-title"><i class="bi bi-download"></i> Exportar Datos</h3>

    <div class="export-card">
        <div class="export-filters">
            <!-- Selector de Tabla -->
            <div class="filter-group">
                <label class="filter-label">Tabla a Importar</label>
                <select class="form-select" @bind="tablaSeleccionada">
                    <option value="">Seleccione una tabla</option>
                    <option value="EvaluacionesDocentes">Evaluaciones Docentes</option>
                    <option value="Capacitaciones">Capacitaciones</option>
                    <option value="Obras">Obras</option>
                    <option value="Investigaciones">Investigaciones</option>
                </select>
            </div>

            @if (!string.IsNullOrWhiteSpace(mensaje))
            {
                <div class="alert alert-danger d-flex align-items-center mt-3" role="alert" style="font-size: 1rem;">
                    <i class="bi bi-exclamation-triangle-fill me-2" style="font-size: 1.4rem;"></i>
                    <div>@mensaje</div>
                </div>
            }


            <!-- Botón de Exportación -->
            <div class="export-button">
                <button class="btn btn-primary" @onclick="ImportarDatos">
                    <i class="bi bi-download"></i> Importar
                   
                </button>
                

            </div>

        </div>

         @if (mostrarFormulario)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(modoEdicion ? "Editar Investigación" : "Agregar Investigación")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarFormulario" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevaInvestigacion" OnValidSubmit="GuardarNuevaInvestigacion">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-3">
                            <div class="col">
                                <label>Título del Proyecto</label>
                                <InputText class="form-control" @bind-Value="nuevaInvestigacion.NombreProyecto" />
                            </div>
                            <div class="col">
                                <label>Carrera</label>
                                <select class="form-select" @bind="nuevaInvestigacion.IdCarrera">
                                    <option value="">Seleccione una carrera</option>
                                    @foreach (var carrera in listaCarreras)
                                    {
                                        <option value="@carrera.IdCarrera">@carrera.Nombre</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => nuevaInvestigacion.IdCarrera)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label>Fecha de Inicio</label>
                                <InputDate class="form-control" @bind-Value="nuevaInvestigacion.FechaInicio" />
                            </div>
                            <div class="col-md-6">
                                <label>Fecha de Fin</label>
                                <InputDate class="form-control" @bind-Value="nuevaInvestigacion.FechaFin" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label>Duración (meses)</label>
                                <InputNumber class="form-control" @bind-Value="nuevaInvestigacion.TiempoMeses"
                                             min="0" step="1"
                                             oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                            </div>
                            <div class="col">
                                <label>Tipo</label>
                                <InputText class="form-control" @bind-Value="nuevaInvestigacion.Tipo" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label>Estado</label>
                                <select class="form-select" @bind="nuevaInvestigacion.Estado">
                                    <option value="">Seleccione estado</option>
                                    <option value="En proceso">En proceso</option>
                                    <option value="En revisión">En revisión</option>
                                    <option value="Publicado">Publicado</option>
                                </select>
                            </div>
                            <div class="col">
                                <label>Tipo Científico</label>
                                <select class="form-select" @bind="nuevaInvestigacion.Cientifico">
                                    <option value="">Seleccione una categoría</option>
                                    <option value="Ciencias Naturalez">Ciencias Naturalez</option>
                                    <option value="Ingeniería y tecnología">Ingeniería y tecnología</option>
                                    <option value="Ciencias Medicas y de la salud">Ciencias Medicas y de la salud</option>
                                </select>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Subir PDF</label>
                            <InputFile OnChange="SubirPDF" accept=".pdf,application/pdf" />
                            @if (!string.IsNullOrEmpty(errorArchivo))
                            {
                                <div class="text-danger">@errorArchivo</div>
                            }
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarFormulario">
                                <i class="bi bi-x-circle"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}




        @if (mostrarInvestigaciones)
        {
                      <div class="mb-3">


                @if (puedeAgregar)
                {
                    <button class="btn btn-success" @onclick="MostrarFormulario">
                        <i class="bi bi-plus-circle"></i> Agregar Investigación
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>
                        <i class="bi bi-plus-circle"></i> Agregar Investigación (deshabilitado)
                    </button>
                    <p class="text-muted mt-2">Ya postulaste. Solo puedes agregar más investigaciones si tu postulación fue rechazada.</p>
                }

</div>

            <h4>Investigaciones</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Tiempo</th>
                        <th>Fecha Inicio</th>
                        <th>Fecha Fin</th>
                        <th>Carrera</th>
                        <th>Tipo</th>
                        <th>Estado</th>
                        <th>Científico</th>
                        <th>PDF</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var inv in listaInvestigaciones)
                    {
                        <tr>
                            <td>@inv.NombreProyecto</td>
                            <td>@inv.TiempoMeses</td>
                            <td>@inv.FechaInicio?.ToShortDateString()</td>
                            <td>@inv.FechaFin?.ToShortDateString()</td>
                            <td>@inv.NombreCarrera</td>
                            <td>@inv.Tipo</td>
                            <td>@inv.Estado</td>
                            <td>@inv.Cientifico </td>




                            <td>

                                @if (inv.Pdf != null && inv.Pdf.Length > 0)
                                {
                                    <a href="#" onclick="openPdf('@Convert.ToBase64String(inv.Pdf)'); return false;"
                                       style="cursor:pointer; color:blue; text-decoration:underline;">
                                        Ver PDF
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">Sin PDF</span>
                                }
                            </td>

                            

<ValidationMessage For="@(() => nuevaInvestigacion.IdCarrera)" />
                            <td>

                                <button class="btn btn-warning btn-sm"
                                        @onclick="() => EditarInvestigacion(inv)"
                                        disabled="@(puedeAgregar == false)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>

                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        }

        @if (mostrarEvaluaciones)
        {
            @if (puedeAgregar)
            {
                <button class="btn btn-success" @onclick="MostrarFormularioEvaluacion">
                    <i class="bi bi-plus-circle"></i> Agregar Evaluacion
                </button>
            }
            else
            {
                <button class="btn btn-secondary" disabled>
                    <i class="bi bi-plus-circle"></i> Agregar Evaluacion (deshabilitado)
                </button>
                <p class="text-muted mt-2">Ya postulaste. Solo puedes agregar más evaluaciones si tu postulación fue rechazada o aceptada.</p>
            }

            

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Período</th>
                        <th>Puntaje Final</th>
                        <th>Fecha Evaluación</th>
                        <th>Tipo</th>
                        <th>Estado</th>
                        <th>Modo</th>
                        <th>PDF</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eval in listaEvaluaciones)
                    {
                        <tr>
                            <td>@eval.Periodo</td>
                            <td>@eval.PuntajeFinal</td>
                            <td>@eval.FechaEvaluacion.ToShortDateString()</td>
                            <td>@eval.TipoEvaluacion</td>
                            <td>@eval.Estado</td>
                            <td>@eval.ModoEvaluacion</td>
                            <td>
                                @if (eval.Pdf is not null && eval.Pdf.Length > 0)
                                {
                                    <a href="#" onclick="openPdf('@Convert.ToBase64String(eval.Pdf)'); return false;">
                                        Ver PDF
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">Sin PDF</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-warning btn-sm"
                                        @onclick="() => EditarEvaluacion(eval)"
                                        disabled="@(puedeAgregar == false)">
                                    <i class="bi bi-pencil"></i> Editar
                                
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }


        @if (mostrarFormEvaluacion)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@((modoEdicionEvaluacion ? "Editar Evaluación" : "Agregar Evaluación"))</h5>
                            <button type="button" class="btn-close" @onclick="CancelarEdicion" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@nuevaEvaluacion" OnValidSubmit="GuardarEvaluacion">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <label>Periodo</label>
                                    <InputText class="form-control" @bind-Value="nuevaEvaluacion.Periodo" />
                                    <ValidationMessage For="@(() => nuevaEvaluacion.Periodo)" />
                                </div>

                                <div class="mb-3">
                                    <label>Puntaje Final</label>
                                    <InputNumber class="form-control" @bind-Value="nuevaEvaluacion.PuntajeFinal" />
                                </div>

                                <div class="mb-3">
                                    <label>Fecha de Evaluación</label>
                                    <InputDate class="form-control" @bind-Value="nuevaEvaluacion.FechaEvaluacion" />
                                </div>

                                <!-- Campo: Tipo de Evaluación -->
                                <div class="mb-3">
                                    <label>Tipo de Evaluación</label>
                                    <InputSelect class="form-control" @bind-Value="nuevaEvaluacion.TipoEvaluacion">
                                        <option value="">Seleccione...</option>
                                        <option>Autoevaluación</option>
                                        <option>Heteroevaluación</option>
                                        <option>Estudiantil</option>
                                    </InputSelect>
                                </div>

                                <!-- Campo: Estado -->
                                <div class="mb-3">
                                    <label>Estado</label>
                                    <InputSelect class="form-control" @bind-Value="nuevaEvaluacion.Estado">
                                        <option value="">Seleccione...</option>
                                        <option>Aprobado</option>
                                        <option>Reprobado</option>
                                    </InputSelect>
                                </div>

                                <!-- Campo: Modo -->
                                <div class="mb-3">
                                    <label>Modo de Evaluación</label>
                                    <InputSelect class="form-control" @bind-Value="nuevaEvaluacion.ModoEvaluacion">
                                        <option value="">Seleccione...</option>
                                        <option>Presencial</option>
                                        <option>Virtual</option>
                                        <option>Mixta</option>
                                    </InputSelect>
                                </div>


                                <div class="mb-3">
                                    <label>Subir PDF</label>
                                    <InputFile OnChange="SubirPDF" accept=".pdf,application/pdf" />
                                </div>

                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary me-2">Guardar</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }


        @if (mostrarCapacitaciones)
{
   @if (puedeAgregar)
{
    <button class="btn btn-success" @onclick="MostrarFormCap">
        <i class="bi bi-plus-circle"></i> Agregar Capacitación
    </button>
}
else
{
    <button class="btn btn-secondary" disabled>
        <i class="bi bi-plus-circle"></i> Agregar Capacitación (deshabilitado)
    </button>
    <p class="text-muted mt-2">Ya postulaste. Solo puedes agregar más capacitaciones si tu postulación fue rechazada.</p>
}
}


@if (mostrarFormCap)
{
    <!-- Backdrop -->
    <div class="modal-backdrop fade show"></div>

    <!-- Ventana modal -->
    <div class="modal fade show d-block"
         tabindex="-1"
         role="dialog"
         style="background-color:rgba(0,0,0,.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">

                <!-- Encabezado -->
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(modoEdicionCap ? "Editar Capacitación"
                                         : "Agregar Capacitación")
                    </h5>
                    <button type="button"
                            class="btn-close"
                            aria-label="Close"
                            @onclick="() => mostrarFormCap = false">
                    </button>
                </div>

                <!-- Cuerpo: aquí va EL MISMO formulario de antes -->
                <div class="modal-body">
                    <EditForm Model="@nuevaCapacitacion"
                              OnValidSubmit="GuardarCapacitacion">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- ─── Fila 1 ─── -->
                        <div class="row mb-3">
                            <div class="col">
                                <label>Nombre del Curso</label>
                                <InputText class="form-control"
                                           @bind-Value="nuevaCapacitacion.NombreCurso" />
                            </div>
                            <div class="col">
                                <label>Duración (horas)</label>
                                <InputNumber class="form-control"
                                             @bind-Value="nuevaCapacitacion.DuracionHoras" />
                            </div>
                        </div>

                        <!-- ─── Fila 2 ─── -->
                        <div class="row mb-3">
                            <div class="col">
                                <label>Fecha de Inicio</label>
                                <InputDate TValue="DateTime"
                                           class="form-control"
                                           @bind-Value="nuevaCapacitacion.FechaInicio" />
                            </div>
                            <div class="col">
                                <label>Fecha de Fin</label>
                                <InputDate TValue="DateTime?"
                                           class="form-control"
                                           @bind-Value="nuevaCapacitacion.FechaFin" />
                            </div>
                        </div>

                        <!-- ─── Fila 3 ─── -->
                        <div class="row mb-3">
                            <div class="col">
                                <label>Tipo</label>
                                <InputSelect class="form-select"
                                             @bind-Value="nuevaCapacitacion.TipoCapacitacion">
                                    <option value="">Seleccione</option>
                                    <option>Curso</option>
                                    <option>Taller</option>
                                    <option>Seminario</option>
                                    <option>Diplomado</option>
                                </InputSelect>
                            </div>
                            <div class="col">
                                <label>Modalidad</label>
                                <InputSelect class="form-select"
                                             @bind-Value="nuevaCapacitacion.Modalidad">
                                    <option value="">Seleccione</option>
                                    <option>Presencial</option>
                                    <option>Virtual</option>
                                    <option>Híbrida</option>
                                </InputSelect>
                            </div>
                        </div>

                        <!-- ─── Fila 4 ─── -->
                        <div class="row mb-3">
                            <div class="col">
                                <label>Institución</label>
                                <InputText class="form-control"
                                           @bind-Value="nuevaCapacitacion.Institucion" />
                            </div>
                            <div class="col form-check mt-4">
                                <InputCheckbox class="form-check-input"
                                               @bind-Value="nuevaCapacitacion.Certificado" />
                                <label class="form-check-label">
                                    Certificado recibido
                                </label>
                            </div>
                        </div>

                        <!-- Observaciones -->
                        <div class="mb-3">
                            <label>Observaciones</label>
                            <InputTextArea class="form-control"
                                           rows="3"
                                           @bind-Value="nuevaCapacitacion.Observaciones" />
                        </div>

                        <!-- PDF -->
                        <div class="mb-3">
                            <label>Subir PDF</label>
                            <InputFile OnChange="SubirPdfCap" />
                        </div>

                        <!-- Botones -->
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> Guardar
                            </button>
                            <button type="button"
                                    class="btn btn-secondary"
                                    @onclick="() => mostrarFormCap = false">
                                <i class="bi bi-x-circle"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
}
@if (mostrarFormObra)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(modoEdicionObra ? "Editar Obra" : "Agregar Obra")</h5>
                    <button type="button" class="btn-close" @onclick="CerrarFormObra" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@nuevaObra" OnValidSubmit="GuardarObra">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label>Título</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.Titulo" />
                                <ValidationMessage For="@(() => nuevaObra.Titulo)" />
                            </div>
                            <div class="col-md-6">
                                <label>Tipo de Obra</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.TipoObra" />
                                <ValidationMessage For="@(() => nuevaObra.TipoObra)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label>Fecha de Publicación</label>
                                <InputDate class="form-control" @bind-Value="nuevaObra.Fecha" />
                                <ValidationMessage For="@(() => nuevaObra.Fecha)" />
                            </div>
                            <div class="col-md-6">
                                <label>Autores</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.Autores" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label>País</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.Pais" />
                            </div>
                            <div class="col-md-6">
                                <label>Ciudad</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.Ciudad" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label>Editorial</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.Editorial" />
                            </div>
                            <div class="col-md-6">
                                <label>ISBN/DOI</label>
                                <InputText class="form-control" @bind-Value="nuevaObra.ISBN" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Resumen</label>
                            <InputTextArea class="form-control" rows="3" @bind-Value="nuevaObra.Resumen" />
                        </div>

                        <div class="mb-3">
                            <label>Subir PDF</label>
                            <InputFile OnChange="SubirPdfObra" accept=".pdf,application/pdf" />
                            @if (!string.IsNullOrEmpty(errorArchivoObra))
                            {
                                <div class="text-danger">@errorArchivoObra</div>
                            }
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle"></i> Guardar
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CerrarFormObra">
                                <i class="bi bi-x-circle"></i> Cancelar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@if (mostrarCapacitaciones)
{
    <h4>Capacitaciones</h4>
    <table class="table">
        <thead>
            <tr>
                   <th>Curso</th>
                <th>Horas</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin</th>
                <th>Tipo</th>
<th>Modalidad</th>
<th>Institución</th>
<th>Cert.</th>

                <th>PDF</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cap in listaCapacitaciones)
            {
                <tr>
                    <td>@cap.NombreCurso</td>
                    <td>@cap.DuracionHoras</td>
                    <td>@cap.FechaInicio.ToShortDateString()</td
                    <td>@cap.FechaFin?.ToShortDateString()</td>
                    <td>@cap.TipoCapacitacion</td>
                    <td>@cap.Modalidad</td>
                    <td>@cap.Institucion</td>
                    <td>@(cap.Certificado ? "Sí" : "No")</td>
                    
                    <td>
                        @if (cap.Pdf is not null && cap.Pdf.Length > 0)
                        {
                            <a href="#" onclick="openPdf('@Convert.ToBase64String(cap.Pdf)'); return false;">
                                Ver PDF
                            </a>
                        }
                        else
                        {
                            <span class="text-muted">Sin PDF</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm"
                                @onclick="() => EditarCapacitacion(cap)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (mostrarObras)
{
    <div class="mb-3">
        @if (puedeAgregar)
        {
            <button class="btn btn-success" @onclick="MostrarFormObra">
                <i class="bi bi-plus-circle"></i> Agregar Obra
            </button>
        }
        else
        {
            <button class="btn btn-secondary" disabled>
                <i class="bi bi-plus-circle"></i> Agregar Obra (deshabilitado)
            </button>
            <p class="text-muted mt-2">Ya postulaste. Solo puedes agregar más obras si tu postulación fue rechazada.</p>
        }
    </div>

    <h4>Obras</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Título</th>
                <th>Tipo</th>
                <th>Fecha</th>
                <th>Autores</th>
                <th>DOI</th>
                <th>ISBN</th>
                <th>Pais</th>
                <th>PDF</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obra in listaObras)
            {
                <tr>
                    <td>@obra.Titulo</td>
                    <td>@obra.TipoObra</td>
                    <td>@obra.Fecha.ToShortDateString()</td>
                    <td>@obra.Autores</td>
                    <td>@obra.DOI</td>
                    <td>@obra.ISBN</td>
                    <td>@obra.Pais</td>
                    <td>
                        @if (obra.Documento != null && obra.Documento.Length > 0)
                        {
                            <a href="#" @onclick="() => AbrirPdf(obra.Documento)" 
                               style="cursor:pointer; color:blue; text-decoration:underline;">
                                Ver PDF
                            </a>
                        }
                        else
                        {
                            <span class="text-muted">Sin PDF</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm"
                                @onclick="() => EditarObra(obra)"
                                disabled="@(puedeAgregar == false)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


        <!-- Filtros Adicionales -->
       
    </div>
</div>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Sobre Nosotros</h4>
            <p>Sistema de Promoción para Docentes de la FISEI.<br>Para agilizar trámites.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Contactos</h4>
            <p>support@correo.com<br>+593 99 234 56789</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Enlaces Rápidos</h4>
            <NavLink href="/inicio"><i class="bi bi-house-fill"></i> Inicio</NavLink><br />
            <NavLink href="/promocion"><i class="bi bi-bar-chart-line-fill"></i> Promoción</NavLink><br />
            <NavLink href="/exportar"><i class="bi bi-backpack4"></i>Exportar Datos</NavLink><br />
            <NavLink href="/perfil"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>
<script>
    function openPdf(base64) {
        const byteCharacters = atob(base64);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'application/pdf' });
        const blobUrl = URL.createObjectURL(blob);
        window.open(blobUrl, '_blank');
    }
</script>


@code {
    private List<Investigacion> listaInvestigaciones = new();
    private bool mostrarInvestigaciones = false;
    private string tablaSeleccionada = "";
    private string mensaje = " ";

    private Investigacion nuevaInvestigacion = new();
    private IBrowserFile? archivoPDF;
    private bool mostrarFormulario = false;

    private bool modoEdicion = false;
    private DateTime fechaInicioTemp;
    private DateTime? fechaFinTemp;
    //estado para el btn
    private string estadoPostulacion;
    private PostulacionDto postulacionActual;
    private bool puedeAgregar = true;

      // ————— Capacitaciones —————
private List<Capacitacione> listaCapacitaciones = new();
private Capacitacione nuevaCapacitacion = new();
private bool mostrarCapacitaciones = false;
private bool mostrarFormCap = false;
private bool modoEdicionCap = false;
private IBrowserFile? archivoPDFCap;
    private string? errorArchivo;
//capacitaciones
private string? cedulaUsuario;


//EVALUACION DOCENTE
    private List<EvaluacionDocente> listaEvaluaciones = new();
    private bool mostrarEvaluaciones = false;
    private bool mostrarFormEvaluacion = false;
    private EvaluacionDocente nuevaEvaluacion = new EvaluacionDocente();
    private string errorArchivoEvaluacion = "";
    private bool modoEdicionEvaluacion = false;
    private IBrowserFile? archivoEvaluacionPDF;


    private async Task CargarEstadoPostulacion()
    {
        try
        {
            var cedula = await localStorage.GetItemAsync<string>("cedulaUsuario");
            if (!string.IsNullOrWhiteSpace(cedula))
            {
                var response = await Http.GetAsync($"api/Promocion/PostulacionPorCedula/{cedula}");
                if (response.IsSuccessStatusCode)
                {
                    postulacionActual = await response.Content.ReadFromJsonAsync<PostulacionDto>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar postulación: {ex.Message}");
        }

        puedeAgregar = postulacionActual == null ||
                       postulacionActual.Estado == "Rechazada" ||
                       postulacionActual.Estado == "Aceptada";
    }





    //--------------evaluacion
    private async Task SubirPdfEvaluacion(InputFileChangeEventArgs e)
    {
        archivoEvaluacionPDF = e.File;
    }
    private void MostrarFormularioEvaluacion()
    {
        mostrarFormEvaluacion = true;
        modoEdicionEvaluacion = false;
        nuevaEvaluacion = new EvaluacionDocente();
    }

    private void CerrarFormularioEvaluacion()
    {
        mostrarFormEvaluacion = false;
        nuevaEvaluacion = new EvaluacionDocente();
        errorArchivoEvaluacion = "";
    }
    


    private async Task GuardarEvaluacion()
    {
        try
        {
            // Obtener la cédula del usuario logueado
            nuevaEvaluacion.Cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

        // Verificar si ya existe una evaluación para el mismo período
        var evaluacionesExistentes = await evaluacionService.ObtenerPorCedulaAsync(nuevaEvaluacion.Cedula);
        if (evaluacionesExistentes.Any(e => 
            e.Periodo.Equals(nuevaEvaluacion.Periodo, StringComparison.OrdinalIgnoreCase) &&
            (!modoEdicionEvaluacion || (modoEdicionEvaluacion && e.IdEval != nuevaEvaluacion.IdEval))))
        {
            mensaje = "Ya existe una evaluación para este período.";
            return;
        }
            Console.WriteLine($"Cédula recuperada: {nuevaEvaluacion.Cedula}");

            if (string.IsNullOrWhiteSpace(nuevaEvaluacion.Cedula))
            {
                mensaje = "No se pudo obtener la cédula del usuario.";
                return;
            }

            // Procesar PDF si se subió
            if (archivoEvaluacionPDF is not null)
            {
                using var stream = archivoEvaluacionPDF.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memory = new MemoryStream();
                await stream.CopyToAsync(memory);
                nuevaEvaluacion.Pdf = memory.ToArray();
            }

            if (modoEdicionEvaluacion)
            {
                await evaluacionService.ActualizarEvaluacionAsync(nuevaEvaluacion);
                mensaje = "Evaluación actualizada correctamente.";
            }
            else
            {
                await evaluacionService.GuardarEvaluacionAsync(nuevaEvaluacion);
                mensaje = "Evaluación guardada correctamente.";
            }

            listaEvaluaciones = await evaluacionService.ObtenerPorCedulaAsync(nuevaEvaluacion.Cedula);

            //  Cerrar el modal y reiniciar estado
            mostrarFormEvaluacion = false;
            modoEdicionEvaluacion = false;
            nuevaEvaluacion = new EvaluacionDocente();
            archivoEvaluacionPDF = null;

            StateHasChanged(); //  Forzar renderizado
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
        }
    }



    private void EditarEvaluacion(EvaluacionDocente ev)
    {
        nuevaEvaluacion = new EvaluacionDocente
            {
                IdEval = ev.IdEval,
                Cedula = ev.Cedula,
                Periodo = ev.Periodo
               
            };
        mostrarFormEvaluacion = true;
        modoEdicionEvaluacion = true;
    }

    private void CancelarEdicion()
    {
        mostrarFormEvaluacion = false;
        modoEdicionEvaluacion = false;
        nuevaEvaluacion = new EvaluacionDocente();
    }

    

// ----- CAPACITACIONES -----
private void MostrarFormCap()
{
    nuevaCapacitacion = new Capacitacione
    {
        Cedula = cedulaUsuario ?? string.Empty,
        FechaInicio = DateTime.Today, // Cambiado de DateOnly a DateTime
         FechaFin    = null 
    };
    mostrarFormCap = true;
    modoEdicionCap = false;
    archivoPDFCap = null;
}
    


private async Task SubirPdfCap(InputFileChangeEventArgs e)
{
    archivoPDFCap = e.File;
}

private async Task GuardarCapacitacion()
{
    try
    {
       nuevaCapacitacion.Cedula = cedulaUsuario;

        // Verificar si ya existe una capacitación con el mismo nombre y fechas
        var capacitacionesExistentes = await capacitacionesService.ObtenerPorCedulaAsync(nuevaCapacitacion.Cedula);
        if (capacitacionesExistentes.Any(c => 
            c.NombreCurso.Equals(nuevaCapacitacion.NombreCurso, StringComparison.OrdinalIgnoreCase) &&
            c.FechaInicio == nuevaCapacitacion.FechaInicio &&
            (!modoEdicionCap || (modoEdicionCap && c.IdCap != nuevaCapacitacion.IdCap))))
        {
            mensaje = "Ya existe una capacitación con el mismo nombre y fecha de inicio.";
            return;
        }

        if (archivoPDFCap is not null)
        {
            using var stream = archivoPDFCap.OpenReadStream(10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            nuevaCapacitacion.Pdf = ms.ToArray();
        }

        if (modoEdicionCap)
            await capacitacionesService.ActualizarAsync(nuevaCapacitacion);
        else
            nuevaCapacitacion =
                await capacitacionesService.GuardarAsync(nuevaCapacitacion) ?? new Capacitacione();

        listaCapacitaciones =
            await capacitacionesService.ObtenerPorCedulaAsync(nuevaCapacitacion.Cedula);

        mostrarFormCap = false;
        modoEdicionCap = false;
        archivoPDFCap = null;
    }
    catch (Exception ex)
    {
        mensaje = $"Error: {ex.Message}";
    }

}

private void EditarCapacitacion(Capacitacione cap)
{
    nuevaCapacitacion = new Capacitacione
    {
        IdCap         = cap.IdCap,
        Cedula        = cap.Cedula,
        NombreCurso   = cap.NombreCurso,
        DuracionHoras = cap.DuracionHoras,
        FechaInicio   = cap.FechaInicio,
         FechaFin      = cap.FechaFin,  
        Pdf           = cap.Pdf
    };

    mostrarFormCap = true;
    modoEdicionCap = true;
}

//capacitaciones

    private async Task ImportarDatos()


    {
        mensaje = "";

        if (string.IsNullOrEmpty(tablaSeleccionada))
        {
            mensaje = "Por favor seleccione una tabla antes de importar.";
            return;
        }

        if (tablaSeleccionada == "Investigaciones")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (!string.IsNullOrEmpty(cedula))
            {
                listaInvestigaciones = await investigacionService.ObtenerPorCedulaAsync(cedula);
                mostrarInvestigaciones = true;
            }
        }
        else
        {
            mostrarInvestigaciones = false; // Ocultar si no es investigaciones
        }

                if (tablaSeleccionada == "Capacitaciones")//capacitaciones
{
    var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
    if (!string.IsNullOrEmpty(cedula))
    {
        listaCapacitaciones = await capacitacionesService.ObtenerPorCedulaAsync(cedula);
        mostrarCapacitaciones = true;
    }
}
else
{
    mostrarCapacitaciones = false;
}

if (tablaSeleccionada == "Obras")
{
    var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
    if (!string.IsNullOrEmpty(cedula))
    {
        listaObras = await obraService.ObtenerPorCedulaAsync(cedula);
        mostrarObras = true;
    }
}
else
{
    mostrarObras = false;
}
        if (tablaSeleccionada == "EvaluacionesDocentes")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            if (!string.IsNullOrEmpty(cedula))
            {
                listaEvaluaciones = await evaluacionService.ObtenerPorCedulaAsync(cedula);
                mostrarEvaluaciones = true;
            }
        }
        else
        {
            mostrarEvaluaciones = false;
        }



    }

    private async Task MostrarFormulario()
    {
        nuevaInvestigacion = new Investigacion();
        mostrarFormulario = true;
        await JS.InvokeVoidAsync("eval", "document.body.classList.add('modal-open');");
    }

    private async void CerrarFormulario()
    {
        mostrarFormulario = false;
        await JS.InvokeVoidAsync("eval", "document.body.classList.remove('modal-open');");
    }

    
    //subir pdfs investigaciones

    private async Task SubirPDF(InputFileChangeEventArgs e)
    {
        var archivo = e.File;

        if (archivo.ContentType != "application/pdf")
        {
            errorArchivo = "Solo se permiten archivos en formato PDF.";
            nuevaInvestigacion.Pdf = null;
            return;
        }
        if (archivoPDF != null)
        {
            var buffer = new byte[archivoPDF.Size];
            await archivoPDF.OpenReadStream().ReadAsync(buffer);
            nuevaInvestigacion.Pdf = buffer;
        }
        try
        {
            using var stream = archivo.OpenReadStream(5 * 1024 * 1024); // Máx. 5 MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            nuevaInvestigacion.Pdf = ms.ToArray();
            errorArchivo = null; // Todo bien
        }
        catch
        {
            errorArchivo = "Error al leer el archivo.";
        }
    }

    private async Task GuardarNuevaInvestigacion()
    {
        try
        {
            nuevaInvestigacion.Cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

        // Verificar si ya existe una investigación con el mismo nombre
        var investigacionesExistentes = await investigacionService.ObtenerPorCedulaAsync(nuevaInvestigacion.Cedula);
        if (investigacionesExistentes.Any(i => 
            i.NombreProyecto.Equals(nuevaInvestigacion.NombreProyecto, StringComparison.OrdinalIgnoreCase) &&
            (!modoEdicion || (modoEdicion && i.IdInv != nuevaInvestigacion.IdInv))))
        {
            mensaje = "Ya existe una investigación con el mismo nombre.";
            return;
        }

            // Procesar archivo PDF si es nuevo
            if (archivoPDF is not null)
            {
                using var stream = archivoPDF.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memory = new MemoryStream();
                await stream.CopyToAsync(memory);
                nuevaInvestigacion.Pdf = memory.ToArray();
            }

            if (modoEdicion)
            {
                await investigacionService.ActualizarInvestigacionAsync(nuevaInvestigacion);
                mensaje = "Investigación actualizada correctamente.";
            }
            else
            {
                var resultado = await investigacionService.GuardarInvestigacionAsync(nuevaInvestigacion);
                if (resultado != null)
                {
                    nuevaInvestigacion = resultado; //Aquí ya tiene el IdInv real
                }

                mensaje = "Investigación guardada correctamente.";
            }

            mostrarFormulario = false;
            modoEdicion = false;
            archivoPDF = null;

            listaInvestigaciones = await investigacionService.ObtenerPorCedulaAsync(nuevaInvestigacion.Cedula);
            modoEdicion = false;
            mostrarFormulario = false;

        }
        catch (Exception ex)
        {
            mensaje = $"Error detallado: {ex.Message}";
        }
    }


    private List<Carrera> listaCarreras = new();

    protected override async Task OnInitializedAsync()
    {
        listaCarreras = await carreraService.ObtenerCarrerasAsync();
        cedulaUsuario = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
        await CargarEstadoPostulacion();



    }


private async Task AbrirPdf(byte[]? pdf)
{
    if (pdf != null && pdf.Length > 0)
    {
        string base64 = Convert.ToBase64String(pdf);
        await JS.InvokeVoidAsync("openPdf", base64); // Eliminado el parámetro "base64" del nombre
    }
}
   

    private void EditarInvestigacion(Investigacion inv)
    {
        nuevaInvestigacion = new Investigacion
            {
                IdInv = inv.IdInv,
                Cedula = inv.Cedula,
                NombreProyecto = inv.NombreProyecto,
                TiempoMeses = inv.TiempoMeses,
                FechaInicio = inv.FechaInicio,
                FechaFin = inv.FechaFin,
                IdCarrera = inv.IdCarrera,
                Estado= inv.Estado,
                 Cientifico= inv.Cientifico,
                 Tipo=inv.Tipo,
                Pdf = inv.Pdf
            };

        mostrarFormulario = true;
        modoEdicion = true;
    }

    

 // ————— Obras —————
private List<ObraS> listaObras = new();
private ObraS nuevaObra = new();
private bool mostrarObras = false;
private bool mostrarFormObra = false;
private bool modoEdicionObra = false;
private IBrowserFile? archivoPDFObra;
private string? errorArchivoObra;

// Mostrar formulario
private void MostrarFormObra()
{
    nuevaObra = new ObraS
    {
        Cedula = cedulaUsuario ?? string.Empty,
        Fecha = DateOnly.FromDateTime(DateTime.Today)
    };
    mostrarFormObra = true;
    modoEdicionObra = false;
    archivoPDFObra = null;
    errorArchivoObra = null;
}

// Cerrar formulario
private void CerrarFormObra()
{
    mostrarFormObra = false;
    modoEdicionObra = false;
    nuevaObra = new ObraS();
    archivoPDFObra = null;
    errorArchivoObra = null;
}

// Subir PDF
private async Task SubirPdfObra(InputFileChangeEventArgs e)
{
    archivoPDFObra = e.File;
    
    if (archivoPDFObra.ContentType != "application/pdf")
    {
        errorArchivoObra = "Solo se permiten archivos en formato PDF.";
        return;
    }

    try
    {
        using var stream = archivoPDFObra.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
        using var memory = new MemoryStream();
        await stream.CopyToAsync(memory);
        nuevaObra.Documento = memory.ToArray();
        errorArchivoObra = null;
    }
    catch (Exception ex)
    {
        errorArchivoObra = $"Error al cargar el archivo: {ex.Message}";
    }
}

// Guardar obra
private async Task GuardarObra()
{
    try
    {
        nuevaObra.Cedula = cedulaUsuario;
        
        // Verificar si ya existe una obra con el mismo título
        var obrasExistentes = await obraService.ObtenerPorCedulaAsync(nuevaObra.Cedula);
        if (obrasExistentes.Any(o => 
            o.Titulo.Equals(nuevaObra.Titulo, StringComparison.OrdinalIgnoreCase) &&
            (!modoEdicionObra || (modoEdicionObra && o.IdObra != nuevaObra.IdObra))))
        {
            mensaje = "Ya existe una obra con el mismo título.";
            return;
        }
        
        if (modoEdicionObra)
        {
            await obraService.ActualizarObraAsync(nuevaObra);
            mensaje = "Obra actualizada correctamente.";
        }
        else
        {
            await obraService.GuardarObraAsync(nuevaObra);
            mensaje = "Obra guardada correctamente.";
        }

        listaObras = await obraService.ObtenerPorCedulaAsync(cedulaUsuario);
        CerrarFormObra();
    }
    catch (Exception ex)
    {
        mensaje = $"Error al guardar la obra: {ex.Message}";
    }
}

private void EditarObra(ObraS obra)
{
    nuevaObra = new ObraS
    {
        IdObra = obra.IdObra,
        Cedula = obra.Cedula,
        Titulo = obra.Titulo,
        TipoObra = obra.TipoObra,
        Fecha = obra.Fecha,
        Pais = obra.Pais,
        Ciudad = obra.Ciudad,
        Editorial = obra.Editorial,
        ISBN = obra.ISBN,
        DOI = obra.DOI,
        Enlace = obra.Enlace,
        Autores = obra.Autores,
        Resumen = obra.Resumen,
        Documento = obra.Documento,
    };
    
    mostrarFormObra = true;
    modoEdicionObra = true;
} 
}