@page "/exportar"
@using Proyecto.Fonted.Services
@using Proyecto.Frontend.Services
@using Proyecto.Shared
@using Proyecto.Shared.Models
@inject IJSRuntime JS
@inject CarreraService carreraService
@inject CapacitacionesService capacitacionesService
@inject ObraService obraService
@inject InvestigacionService investigacionService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    /* Estilos específicos para la página de exportación */
    .export-container {
    max-width: 1200px;
    margin: var(--spacing-xl) auto;
    padding: 0 var(--spacing-md);
    }

    .export-title {
    color: var(--primary-color);
    margin-bottom: var(--spacing-lg);
    font-size: 1.8rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    }

    .export-card {
    background-color: var(--card-bg-color);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-md);
    padding: var(--spacing-xl);
    margin-bottom: var(--spacing-lg);
    }

    .export-filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    }

    .filter-group {
    margin-bottom: var(--spacing-md);
    }

    .filter-label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--dark-text-color);
    }

    .form-select, .form-control {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    font-size: 1rem;
    transition: var(--transition-normal);
    background-color: var(--light-bg-color);
    }

    .form-select:focus, .form-control:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
    outline: none;
    background-color: var(--card-bg-color);
    }

    .export-button {
    display: flex;
    align-items: flex-end;
    }

    .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    text-decoration: none;
    box-shadow: var(--shadow-sm);
    }

    .btn-primary {
    background-color: var(--secondary-color);
    color: white;
    }

    .btn-primary:hover {
    background-color: darken(var(--secondary-color), 8%);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    }

    .additional-filters {
    background-color: var(--light-bg-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
    color: var(--primary-color);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    }

    .filter-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    }

    .filter-item {
    margin-bottom: var(--spacing-sm);
    }

    /* Ocultar filtros específicos inicialmente */
    .usuario-filters, .evaluacion-filters {
    display: none;
    }

    /* Mostrar filtros según la selección (esto se manejaría con JS) */
    select.form-select[value="Usuarios"] ~ .additional-filters .usuario-filters {
    display: grid;
    }

    select.form-select[value="EvaluacionesDocentes"] ~ .additional-filters .evaluacion-filters {
    display: grid;
    }
</style>

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio" class="nav-item">
            <i class="bi bi-house-fill"></i> Inicio
        </NavLink>
        <NavLink href="/promocion" class="nav-item">
            <i class="bi bi-bar-chart-line-fill"></i> Promoción
        </NavLink>
        <NavLink href="/perfil" class="nav-item">
            <i class="bi bi-person-fill"></i> Perfil
        </NavLink>
        <NavLink href="/exportar" class="nav-item active">
            <i class="bi bi-download"></i> Agregar Documento
        </NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion">
            <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
        </NavLink>
    </nav>
</header>

<div class="export-container">
    <h3 class="export-title"><i class="bi bi-download"></i> Exportar Datos</h3>

    <div class="export-card">
        <div class="export-filters">
            <!-- Selector de Tabla -->
            <div class="filter-group">
                <label class="filter-label">Tabla a Importar</label>
                <select class="form-select" @bind="tablaSeleccionada">
                    <option value="">Seleccione una tabla</option>
                    <option value="EvaluacionesDocentes">Evaluaciones Docentes</option>
                    <option value="Capacitaciones">Capacitaciones</option>
                    <option value="Obras">Obras</option>
                    <option value="Investigaciones">Investigaciones</option>
                </select>
            </div>

            @if (!string.IsNullOrEmpty(mensaje))
            {
                <div class="alert alert-warning mt-2">@mensaje</div>
            }

            <!-- Botón de Exportación -->
            <div class="export-button">
                <button class="btn btn-primary" @onclick="ImportarDatos">
                    <i class="bi bi-download"></i> Importar
                   
                </button>
                

            </div>

        </div>
        @if (mostrarFormulario)
        {
            <div class="modal-backdrop fade show"></div>
            <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.2)">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" style="background: var(--primary-color); color: white;">
                            <h5 class="modal-title">
                                <i class="bi bi-journal-plus"></i> @((modoEdicion ? "Editar" : "Agregar") + " Investigación")
                            </h5>
                            <button type="button" class="btn-close" @onclick="CerrarFormulario"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@nuevaInvestigacion" OnValidSubmit="GuardarNuevaInvestigacion">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Título del Proyecto</label>
                                        <InputText class="form-control" @bind-Value="nuevaInvestigacion.NombreProyecto" />
                                    </div>
                                    <div class="col">
                                        <label>Carrera</label>
                                        <select class="form-select" @bind="nuevaInvestigacion.IdCarrera">
                                            <option value="">Seleccione una carrera</option>
                                            @foreach (var carrera in listaCarreras)
                                            {
                                                <option value="@carrera.IdCarrera">@carrera.Nombre</option>
                                            }
                                        </select>
                                        <ValidationMessage For="@(() => nuevaInvestigacion.IdCarrera)" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="fechaInicio">Fecha de Inicio</label>
                                        <InputDate id="fechaInicio"
                                                   @bind-Value="nuevaInvestigacion.FechaInicio"
                                                   class="form-control" />
                                        <ValidationMessage For="@(() => nuevaInvestigacion.FechaInicio)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="fechaFin">Fecha de Fin</label>
                                        <InputDate id="fechaFin"
                                                   @bind-Value="nuevaInvestigacion.FechaFin"
                                                   class="form-control" />
                                        <ValidationMessage For="@(() => nuevaInvestigacion.FechaFin)" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Duración (meses)</label>
                                        <InputNumber @bind-Value="nuevaInvestigacion.TiempoMeses"
                                                     class="form-control"
                                                     min="0"
                                                     step="1"
                                                     oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
                                        <ValidationMessage For="@(() => nuevaInvestigacion.TiempoMeses)" />
                                    </div>
                                    <div class="col">
                                        <label>Tipo</label>
                                        <InputText class="form-control" @bind-Value="nuevaInvestigacion.Tipo" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Estado</label>
                                        <select class="form-select" @bind="nuevaInvestigacion.Estado">
                                            <option value="">Seleccione estado</option>
                                            <option value="En proceso">En proceso</option>
                                            <option value="En revisión">En revisión</option>
                                            <option value="Publicado">Publicado</option>
                                        </select>
                                        <ValidationMessage For="@(() => nuevaInvestigacion.Estado)" />
                                    </div>
                                    <div class="col">
                                        <label>Tipo Científico</label>
                                        <select class="form-select" @bind="nuevaInvestigacion.Cientifico">
                                            <option value="">Seleccione una categoría</option>
                                            <option value="Ciencias Naturalez">Ciencias Naturalez</option>
                                            <option value="Ingeniería y tecnología">Ingeniería y tecnología</option>
                                            <option value="Ciencias Medicas y de la salud">Ciencias Medicas y de la salud</option>
                                        </select>
                                        <ValidationMessage For="@(() => nuevaInvestigacion.Cientifico)" />
                                    </div>
                                </div>
                                @* ...dentro del modal de agregar investigación... *@
                                <div class="mb-3">
                                    <label>Subir PDF</label>
                                    <InputFile OnChange="SubirPDF" accept=".pdf,application/pdf" />
                                    @if (!string.IsNullOrEmpty(errorArchivo))
                                    {
                                        <div class="text-danger">@errorArchivo</div>
                                    }
                                </div>
                                <div class="d-flex gap-2 justify-content-end">
                                    <button type="submit" class="btn btn-primary" disabled="@(!puedeAgregarInvestigacion)">
                                        <i class="bi bi-check-circle"></i> Guardar
                                    </button>
                                    <button type="button" class="btn btn-secondary" @onclick="CerrarFormulario">
                                        <i class="bi bi-x-circle"></i> Cancelar
                                    </button>
                                </div>
                                @* ...igual para capacitaciones y obras, usando disabled="@(!puedeAgregarCapacitacion)" y disabled="@(!puedeAgregarObra)" respectivamente *@
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }
<br /> 
<br />
        @if (mostrarInvestigaciones)
        {
            <div class="mb-3">
    <button class="btn btn-success" @onclick="MostrarFormulario">
        <i class="bi bi-plus-circle"></i> Agregar Investigación
    </button>
</div>

            <h4>Investigaciones</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Tiempo</th>
                        <th>Fecha Inicio</th>
                        <th>Fecha Fin</th>
                        <th>Carrera</th>
                        <th>Tipo</th>
                        <th>Estado</th>
                        <th>Científico</th>
                        <th>PDF</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var inv in listaInvestigaciones)
                    {
                        <tr>
                            <td>@inv.NombreProyecto</td>
                            <td>@inv.TiempoMeses</td>
                            <td>@inv.FechaInicio?.ToShortDateString()</td>
                            <td>@inv.FechaFin?.ToShortDateString()</td>
                            <td>@inv.NombreCarrera</td>
                            <td>@inv.Tipo</td>
                            <td>@inv.Estado</td>
                            <td>@inv.Cientifico </td>




                            <td>

                                @if (inv.Pdf != null && inv.Pdf.Length > 0)
                                {
                                    <a href="#" onclick="openPdf('@Convert.ToBase64String(inv.Pdf)'); return false;"
                                       style="cursor:pointer; color:blue; text-decoration:underline;">
                                        Ver PDF
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">Sin PDF</span>
                                }
                            </td>

                            

<ValidationMessage For="@(() => nuevaInvestigacion.IdCarrera)" />
                            <td>
                            
                                <button class="btn btn-warning btn-sm" @onclick="() => EditarInvestigacion(inv)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        }

       
         @if (mostrarCapacitaciones)
{
    <div class="mb-3">
        <button class="btn btn-success" @onclick="MostrarFormCap">
            <i class="bi bi-plus-circle"></i> Agregar Capacitación
        </button>
    </div>
}

        @if (mostrarFormCap)
        {
            <div class="modal-backdrop fade show"></div>
            <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.2)">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" style="background: var(--primary-color); color: white;">
                            <h5 class="modal-title">
                                <i class="bi bi-journal-plus"></i> @((modoEdicionCap ? "Editar" : "Agregar") + " Capacitación")
                            </h5>
                            <button type="button" class="btn-close" @onclick="() => mostrarFormCap = false"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@nuevaCapacitacion" OnValidSubmit="GuardarCapacitacion">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Nombre del Curso</label>
                                        <InputText class="form-control" @bind-Value="nuevaCapacitacion.NombreCurso" />
                                    </div>
                                    <div class="col">
                                        <label>Duración (horas)</label>
                                        <InputNumber class="form-control" @bind-Value="nuevaCapacitacion.DuracionHoras" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Fecha de Inicio</label>
                                        <InputDate TValue="DateTime" @bind-Value="nuevaCapacitacion.FechaInicio" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Subir PDF</label>
                                    <InputFile OnChange="SubirPdfCap" />
                                </div>
                                <div class="d-flex gap-2 justify-content-end">
                                    <button class="btn btn-primary">
                                        <i class="bi bi-check-circle"></i> Guardar
                                    </button>
                                    <button type="button" class="btn btn-secondary"
                                            @onclick="() => mostrarFormCap = false">
                                        <i class="bi bi-x-circle"></i> Cancelar
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }


        @if (mostrarFormObra)
        {
            <div class="modal-backdrop fade show"></div>
            <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.2)">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" style="background: var(--primary-color); color: white;">
                            <h5 class="modal-title">
                                <i class="bi bi-journal-plus"></i> @((modoEdicionObra ? "Editar" : "Agregar") + " Obra")
                            </h5>
                            <button type="button" class="btn-close" @onclick="() => mostrarFormObra = false"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@nuevaObra" OnValidSubmit="GuardarObra">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Título</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Titulo" />
                                    </div>
                                    <div class="col">
                                        <label>Tipo</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.TipoObra" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Fecha</label>
                                        <InputDate TValue="DateTime" class="form-control" @bind-Value="nuevaObra.Fecha" />
                                    </div>
                                    <div class="col">
                                        <label>Pais</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Pais" />
                                    </div>
                                    <div class="col">
                                        <label>Ciudad</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Ciudad" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Editorial</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Editorial" />
                                    </div>
                                    <div class="col">
                                        <label>ISBN</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.ISBN" />
                                    </div>
                                    <div class="col">
                                        <label>DOI</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.DOI" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col">
                                        <label>Enlace</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Enlace" />
                                    </div>
                                    <div class="col">
                                        <label>Autores</label>
                                        <InputText class="form-control" @bind-Value="nuevaObra.Autores" />
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label>Resumen</label>
                                    <InputTextArea class="form-control" @bind-Value="nuevaObra.Resumen" />
                                </div>
                                <div class="mb-3">
                                    <label>Subir PDF</label>
                                    <InputFile OnChange="SubirPdfObra" accept=".pdf,application/pdf" />
                                </div>
                                <div class="d-flex gap-2 justify-content-end">
                                    <button class="btn btn-primary">
                                        <i class="bi bi-check-circle"></i> Guardar
                                    </button>
                                    <button type="button" class="btn btn-secondary"
                                            @onclick="() => mostrarFormObra = false">
                                        <i class="bi bi-x-circle"></i> Cancelar
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }


@if (mostrarCapacitaciones)
{
    <h4>Capacitaciones</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Curso</th>
                <th>Horas</th>
                <th>Fecha Inicio</th>
                <th>PDF</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cap in listaCapacitaciones)
            {
                <tr>
                    <td>@cap.NombreCurso</td>
                    <td>@cap.DuracionHoras</td>
                    <td>@cap.FechaInicio.ToShortDateString()</td>
                    <td>
                        @if (cap.Pdf is not null && cap.Pdf.Length > 0)
                        {
                            <a href="#" onclick="openPdf('@Convert.ToBase64String(cap.Pdf)'); return false;">
                                Ver PDF
                            </a>
                        }
                        else
                        {
                            <span class="text-muted">Sin PDF</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm"
                                @onclick="() => EditarCapacitacion(cap)">
                            <i class="bi bi-pencil"></i> Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


        @if (mostrarObras)
        {
            <div class="mb-3">
                <button class="btn btn-success" @onclick="MostrarFormObra">
                    <i class="bi bi-plus-circle"></i> Agregar Obra
                </button>
            </div>

            <h4>Obras</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Tipo</th>
                        <th>Fecha</th>
                        <th>Pais</th>
                        <th>Ciudad</th>
                        <th>Editorial</th>
                        <th>ISBN</th>
                        <th>DOI</th>
                        <th>Enlace</th>
                        <th>Autores</th>
                        <th>Resumen</th>
                        <th>PDF</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var obra in listaObras)
                    {
                        <tr>
                            <td>@obra.Titulo</td>
                            <td>@obra.TipoObra</td>
                            <td>@obra.Fecha.ToShortDateString()</td>
                            <td>@obra.Pais</td>
                            <td>@obra.Ciudad</td>
                            <td>@obra.Editorial</td>
                            <td>@obra.ISBN</td>
                            <td>@obra.DOI</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(obra.Enlace))
                                {
                                    <a href="@obra.Enlace" target="_blank">Enlace</a>
                                }
                            </td>
                            <td>@obra.Autores</td>
                            <td>@obra.Resumen</td>
                            <td>
                                @if (obra.PDF is not null && obra.PDF.Length > 0)
                                {
                                    <a href="#" onclick="openPdf('@Convert.ToBase64String(obra.PDF)'); return false;">
                                        Ver PDF
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">Sin PDF</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-warning btn-sm" @onclick="() => EditarObra(obra)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.2)">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="background: var(--primary-color); color: white;">
                    <h5 class="modal-title">
                        <i class="bi bi-info-circle-fill"></i> Notificación
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => mensaje = string.Empty"></button>
                </div>
                <div class="modal-body">
                    <p>@mensaje</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => mensaje = string.Empty">
                        <i class="bi bi-check-circle"></i> Aceptar
                    </button>
                </div>
            </div>
        </div>
    </div>
}
       
    </div>
</div>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Sobre Nosotros</h4>
            <p>Sistema de Promoción para Docentes de la FISEI.<br>Para agilizar trámites.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Contactos</h4>
            <p>support@correo.com<br>+593 99 234 56789</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Enlaces Rápidos</h4>
            <NavLink href="/inicio"><i class="bi bi-house-fill"></i> Inicio</NavLink><br />
            <NavLink href="/promocion"><i class="bi bi-bar-chart-line-fill"></i> Promoción</NavLink><br />
            <NavLink href="/exportar"><i class="bi bi-backpack4"></i>Exportar Datos</NavLink><br />
            <NavLink href="/perfil"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>
<script>
    function openPdf(base64) {
        const byteCharacters = atob(base64);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'application/pdf' });
        const blobUrl = URL.createObjectURL(blob);
        window.open(blobUrl, '_blank');
    }
</script>


@code {
    private bool puedeAgregarInvestigacion = true;
    private bool puedeAgregarCapacitacion = true;
    private bool puedeAgregarObra = true;

    // Requisitos máximos (puedes obtenerlos de la API si lo deseas)
    private int maxInvestigaciones = 3;
    private int maxCapacitaciones = 3;
    private int maxObras = 3;

    // Comprimir PDF (requiere NuGet: PdfSharpCore o similar, aquí ejemplo simple)
    private async Task<byte[]> ComprimirPdfAsync(IBrowserFile archivo)
    {
        // Solo ejemplo: en Blazor WebAssembly no puedes manipular PDF nativamente,
        // pero puedes reducir el tamaño leyendo menos bytes o usando una librería JS.
        // Aquí solo se limita el tamaño máximo.
        using var stream = archivo.OpenReadStream(2 * 1024 * 1024); // 2MB máx
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        return ms.ToArray();
    }

    private List<Investigacion> listaInvestigaciones = new();
    private bool mostrarInvestigaciones = false;
    private string tablaSeleccionada = "";
    private string mensaje = " ";

    private Investigacion nuevaInvestigacion = new();
    private IBrowserFile? archivoPDF;
    private bool mostrarFormulario = false;

    private bool modoEdicion = false;
    private DateTime fechaInicioTemp;
    private DateTime? fechaFinTemp;
    //estado para el btn
    private string estadoPostulacion;
    private bool puedeAgregar = true;
      // ————— Capacitaciones —————
private List<Capacitacione> listaCapacitaciones = new();
private Capacitacione nuevaCapacitacion = new();
private bool mostrarCapacitaciones = false;
private bool mostrarFormCap = false;
private bool modoEdicionCap = false;
private IBrowserFile? archivoPDFCap;
    private string? errorArchivo;
//capacitaciones
private string? cedulaUsuario;

// ----- CAPACITACIONES -----
private void MostrarFormCap()
{
    nuevaCapacitacion = new Capacitacione
    {
        Cedula = cedulaUsuario ?? string.Empty,
        FechaInicio = DateTime.Today // Cambiado de DateOnly a DateTime
    };
    mostrarFormCap = true;
    modoEdicionCap = false;
    archivoPDFCap = null;
}
    


    private async Task SubirPdfCap(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo.ContentType != "application/pdf")
        {
            errorArchivo = "Solo se permiten archivos en formato PDF.";
            nuevaCapacitacion.Pdf = null;
            return;
        }
        try
        {
            nuevaCapacitacion.Pdf = await ComprimirPdfAsync(archivo);
            errorArchivo = null;
        }
        catch
        {
            errorArchivo = "Error al leer o comprimir el archivo.";
        }
    }

private async Task GuardarCapacitacion()
{
    try
    {
       

        if (archivoPDFCap is not null)
        {
            using var stream = archivoPDFCap.OpenReadStream(10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            nuevaCapacitacion.Pdf = ms.ToArray();
        }

        if (modoEdicionCap)
            await capacitacionesService.ActualizarAsync(nuevaCapacitacion);
        else
            nuevaCapacitacion =
                await capacitacionesService.GuardarAsync(nuevaCapacitacion) ?? new Capacitacione();

        listaCapacitaciones =
            await capacitacionesService.ObtenerPorCedulaAsync(nuevaCapacitacion.Cedula);

        mostrarFormCap = false;
        modoEdicionCap = false;
        archivoPDFCap = null;
    }
    catch (Exception ex)
    {
        mensaje = $"Error: {ex.Message}";
    }
        ActualizarEstadosAgregar();
}

private void EditarCapacitacion(Capacitacione cap)
{
    nuevaCapacitacion = new Capacitacione
    {
        IdCap         = cap.IdCap,
        Cedula        = cap.Cedula,
        NombreCurso   = cap.NombreCurso,
        DuracionHoras = cap.DuracionHoras,
        FechaInicio   = cap.FechaInicio,
        Pdf           = cap.Pdf
    };

    mostrarFormCap = true;
    modoEdicionCap = true;
}

//capacitaciones

    private async Task ImportarDatos()


    {
        mensaje = "";

        if (string.IsNullOrEmpty(tablaSeleccionada))
        {
            mensaje = "Por favor seleccione una tabla antes de importar.";
            return;
        }

        if (tablaSeleccionada == "Investigaciones")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (!string.IsNullOrEmpty(cedula))
            {
                listaInvestigaciones = await investigacionService.ObtenerPorCedulaAsync(cedula);
                mostrarInvestigaciones = true;
            }
        }
        else
        {
            mostrarInvestigaciones = false; // Ocultar si no es investigaciones
        }

                if (tablaSeleccionada == "Capacitaciones")//capacitaciones
{
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            if (!string.IsNullOrEmpty(cedula))
            {
                listaCapacitaciones = await capacitacionesService.ObtenerPorCedulaAsync(cedula);
                mostrarCapacitaciones = true;
            }
        }
        else
        {
            mostrarCapacitaciones = false;
        }

        if (tablaSeleccionada == "Obras")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            if (!string.IsNullOrEmpty(cedula))
            {
                listaObras = await obraService.ObtenerPorCedulaAsync(cedula);
                mostrarObras = true;
            }
        }
        else
        {
            mostrarObras = false;
        }


        ActualizarEstadosAgregar();
    }



    private async Task MostrarFormulario()
    {
        nuevaInvestigacion = new Investigacion();
        mostrarFormulario = true;
    }

    private void CerrarFormulario()
    {
        mostrarFormulario = false;
    }
    
    //subir pdfs investigaciones

private async Task SubirPDF(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo.ContentType != "application/pdf")
        {
            errorArchivo = "Solo se permiten archivos en formato PDF.";
            nuevaInvestigacion.Pdf = null;
            return;
        }
        try
        {
            nuevaInvestigacion.Pdf = await ComprimirPdfAsync(archivo);
            errorArchivo = null;
        }
        catch
        {
            errorArchivo = "Error al leer o comprimir el archivo.";
        }
    }

    private async Task GuardarNuevaInvestigacion()
    {
        try
        {
            nuevaInvestigacion.Cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            // Procesar archivo PDF si es nuevo
            if (archivoPDF is not null)
            {
                using var stream = archivoPDF.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                using var memory = new MemoryStream();
                await stream.CopyToAsync(memory);
                nuevaInvestigacion.Pdf = memory.ToArray();
            }

            if (modoEdicion)
            {
                await investigacionService.ActualizarInvestigacionAsync(nuevaInvestigacion);
                mensaje = "Investigación actualizada correctamente.";
            }
            else
            {
                var resultado = await investigacionService.GuardarInvestigacionAsync(nuevaInvestigacion);
                if (resultado != null)
                {
                    nuevaInvestigacion = resultado; //Aquí ya tiene el IdInv real
                }

                mensaje = "Investigación guardada correctamente.";
            }

            mostrarFormulario = false;
            modoEdicion = false;
            archivoPDF = null;

            listaInvestigaciones = await investigacionService.ObtenerPorCedulaAsync(nuevaInvestigacion.Cedula);
            modoEdicion = false;
            mostrarFormulario = false;

        }
        catch (Exception ex)
        {
            mensaje = $"Error detallado: {ex.Message}";
        }
        ActualizarEstadosAgregar();
    }


    private List<Carrera> listaCarreras = new();

    protected override async Task OnInitializedAsync()
    {
        listaCarreras = await carreraService.ObtenerCarrerasAsync();
            cedulaUsuario = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

    }

    
    private async Task AbrirPdf(byte[]? pdf)
    {
        if (pdf != null && pdf.Length > 0)
        {
            string base64 = Convert.ToBase64String(pdf);
            await JS.InvokeVoidAsync("openPdfFromBase64", base64);
        }
    }

    private void EditarInvestigacion(Investigacion inv)
    {
        nuevaInvestigacion = new Investigacion
            {
                IdInv = inv.IdInv,
                Cedula = inv.Cedula,
                NombreProyecto = inv.NombreProyecto,
                TiempoMeses = inv.TiempoMeses,
                FechaInicio = inv.FechaInicio,
                FechaFin = inv.FechaFin,
                IdCarrera = inv.IdCarrera,
                Estado= inv.Estado,
                 Cientifico= inv.Cientifico,
                 Tipo=inv.Tipo,
                Pdf = inv.Pdf
            };

        mostrarFormulario = true;
        modoEdicion = true;
    }

    

    // ————— Obras —————
    private List<ObraS> listaObras = new();
    private ObraS nuevaObra = new();
    private bool mostrarObras = false;
    private bool mostrarFormObra = false;
    private bool modoEdicionObra = false;
    private IBrowserFile? archivoPDFObra;

    private void MostrarFormObra()
    {
        nuevaObra = new ObraS
        {
            Cedula = cedulaUsuario ?? string.Empty,
            Fecha = DateTime.Today
        };
        mostrarFormObra = true;
        modoEdicionObra = false;
        archivoPDFObra = null;
    }

    private async Task SubirPdfObra(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo.ContentType != "application/pdf")
        {
            errorArchivo = "Solo se permiten archivos en formato PDF.";
            nuevaObra.PDF = null;
            return;
        }
        try
        {
            nuevaObra.PDF = await ComprimirPdfAsync(archivo);
            errorArchivo = null;
        }
        catch
        {
            errorArchivo = "Error al leer o comprimir el archivo.";
        }
    }

    private async Task GuardarObra()
    {
        try
        {
            if (archivoPDFObra is not null)
            {
                using var stream = archivoPDFObra.OpenReadStream(10 * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                nuevaObra.PDF = ms.ToArray();
            }

            if (modoEdicionObra)
                await obraService.ActualizarObraAsync(nuevaObra);
            else
                nuevaObra = await obraService.GuardarObraAsync(nuevaObra) ?? new ObraS();

            listaObras = await obraService.ObtenerPorCedulaAsync(nuevaObra.Cedula);
            mostrarFormObra = false;
            modoEdicionObra = false;
            archivoPDFObra = null;
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
        }
        ActualizarEstadosAgregar();
    }

    private void EditarObra(ObraS obra)
    {
        nuevaObra = new ObraS
        {
            IdObra = obra.IdObra,
            Cedula = obra.Cedula,
            Titulo = obra.Titulo,
            TipoObra = obra.TipoObra,
            Fecha = obra.Fecha,
            Pais = obra.Pais,
            Ciudad = obra.Ciudad,
            Editorial = obra.Editorial,
            ISBN = obra.ISBN,
            DOI = obra.DOI,
            Enlace = obra.Enlace,
            Autores = obra.Autores,
            Resumen = obra.Resumen,
            PDF = obra.PDF
        };
        mostrarFormObra = true;
        modoEdicionObra = true;
    }

    private void ActualizarEstadosAgregar()
    {
        puedeAgregarInvestigacion = listaInvestigaciones.Count < maxInvestigaciones;
        puedeAgregarCapacitacion = listaCapacitaciones.Count < maxCapacitaciones;
        puedeAgregarObra = listaObras.Count < maxObras;
    }
  
}