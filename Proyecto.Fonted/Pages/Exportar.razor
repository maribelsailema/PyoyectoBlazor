@page "/exportar"
@using Proyecto.Fonted.Services
@using Proyecto.Frontend.Services
@using Proyecto.Shared.Models
@inject IJSRuntime JS
@inject InvestigacionService investigacionService
@inject CarreraService carreraService
@inject ObraService obraService

<style>
    /* Estilos simplificados */
    .export-container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 0 15px;
    }

    .export-title {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 1.8rem;
        font-weight: 700;
    }

    .form-select, .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
</style>

<h3>Exportar Datos</h3>

<div class="mb-3">
    <label>Tabla:</label>
    <select @bind="tablaSeleccionada" class="form-select d-inline-block w-auto">
        <option value="">-- seleccione --</option>
        <option value="Investigaciones">Investigaciones</option>
        <option value="Obras">Obras</option>
    </select>

    <button class="btn btn-primary ms-2" @onclick="AbrirModalImportar" disabled="@(string.IsNullOrEmpty(tablaSeleccionada))">
        Importar
    </button>
    <button class="btn btn-secondary ms-2" @onclick="AbrirModalAgregar" disabled="@(string.IsNullOrEmpty(tablaSeleccionada))">
        Agregar
    </button>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-warning">@mensaje</div>
}

@if (mostrarRegistros)
{
    <h5>@tablaSeleccionada</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                @if (tablaSeleccionada == "Investigaciones")
                {
                    <th>Título</th>
                    <th>Tiempo</th>
                    <th>Fechas</th>
                    <th>PDF</th>
                }
                else
                {
                    <th>Tipo</th>
                    <th>Fecha</th>
                    <th>PDF</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var reg in registros)
            {
                <tr>
                    <Component1 />  
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal Importar -->
<div class="modal fade" tabindex="-1" id="modalImportar">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Importar @tablaSeleccionada</h5>
                <button type="button" class="btn-close" @onclick="CerrarModalImportar"></button>
            </div>
            <div class="modal-body">
                <p>¿Desea cargar los registros?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalImportar">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmarImportar">Cargar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Agregar -->
<div class="modal fade" tabindex="-1" id="modalAgregar">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Agregar @tablaSeleccionada</h5>
                <button type="button" class="btn-close" @onclick="CerrarModalAgregar"></button>
            </div>
            <div class="modal-body">
                @if (tablaSeleccionada == "Investigaciones")
                {
                    <EditForm Model="modeloNuevoInv" OnValidSubmit="GuardarInvestigacion">
                        <InputText @bind-Value="modeloNuevoInv.NombreProyecto" placeholder="Título" class="form-control mb-2" />
                        <InputDate @bind-Value="modeloNuevoInv.FechaInicio" class="form-control mb-2" />
                        <InputDate @bind-Value="modeloNuevoInv.FechaFin" class="form-control mb-2" />
                        <InputFile OnChange="HandlePdfNuevoInv" class="form-control mb-2" />
                    </EditForm>
                }
                else
                {
                    <EditForm Model="modeloNuevaObra" OnValidSubmit="GuardarObra">
                        <InputText @bind-Value="modeloNuevaObra.TipoObra" placeholder="Tipo de obra" class="form-control mb-2" />
                        <InputDate @bind-Value="modeloNuevaObra.Fecha" class="form-control mb-2" />
                        <InputFile OnChange="HandlePdfNuevaObra" class="form-control mb-2" />
                    </EditForm>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalAgregar">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="GuardarNuevoRegistro">Guardar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string tablaSeleccionada = "";
    private string mensaje = "";
    private bool mostrarRegistros = false;
    private List<object> registros = new();

    private Investigacion modeloNuevoInv = new();
    private IBrowserFile? pdfNuevoInv;

    private Obra modeloNuevaObra = new();
    private IBrowserFile? pdfNuevaObra;

    private async Task AbrirModalImportar()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('modalImportar')).show()");
    }

    private async Task CerrarModalImportar()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('modalImportar')).hide()");
    }

    private async Task AbrirModalAgregar()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('modalAgregar')).show()");
    }

    private async Task CerrarModalAgregar()
    {
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('modalAgregar')).hide()");
    }

    private async Task ConfirmarImportar()
    {
        await CerrarModalImportar();
        await CargarRegistros();
    }

    private async Task CargarRegistros()
    {
        try
        {
            mostrarRegistros = true;
            registros.Clear();

            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (tablaSeleccionada == "Investigaciones")
            {
                var investigaciones = await investigacionService.ObtenerPorCedulaAsync(cedula);
                registros.AddRange(investigaciones.Cast<object>());
            }
            else
            {
                var obras = await obraService.ObtenerPorCedulaAsync(cedula);
                registros.AddRange(obras.Cast<object>());
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error al cargar registros: {ex.Message}";
        }
    }

    private async Task GuardarNuevoRegistro()
    {
        if (tablaSeleccionada == "Investigaciones")
        {
            await GuardarInvestigacion();
        }
        else
        {
            await GuardarObra();
        }
        await CerrarModalAgregar();
        await CargarRegistros();
    }

    private async Task HandlePdfNuevoInv(InputFileChangeEventArgs e)
    {
        pdfNuevoInv = e.File;
        using var stream = e.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        modeloNuevoInv.Pdf = memoryStream.ToArray();
    }

    private async Task HandlePdfNuevaObra(InputFileChangeEventArgs e)
    {
        pdfNuevaObra = e.File;
        using var stream = e.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        modeloNuevaObra.Pdf = memoryStream.ToArray();
    }

    private async Task GuardarInvestigacion()
    {
        try
        {
            modeloNuevoInv.Cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            await investigacionService.GuardarInvestigacionAsync(modeloNuevoInv);
            mensaje = "Investigación guardada";
            modeloNuevoInv = new();
            pdfNuevoInv = null;
        }
        catch (Exception ex)
        {
            mensaje = $"Error al guardar investigación: {ex.Message}";
        }
    }

    private async Task GuardarObra()
    {
        try
        {
            modeloNuevaObra.Cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            await obraService.GuardarObraAsync(modeloNuevaObra);
            mensaje = "Obra guardada";
            modeloNuevaObra = new();
            pdfNuevaObra = null;
        }
        catch (Exception ex)
        {
            mensaje = $"Error al guardar obra: {ex.Message}";
        }
    }

    private async Task VerPdf(byte[] pdf)
    {
        var base64 = Convert.ToBase64String(pdf);
        await JS.InvokeVoidAsync("window.open", $"data:application/pdf;base64,{base64}", "_blank");
    }
}