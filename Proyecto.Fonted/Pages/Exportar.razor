@page "/exportar"
@using Proyecto.Backend.Domain.Entities.Models
@using Proyecto.Frontend.Services
@inject IJSRuntime JS
@inject InvestigacionService investigacionService
@inject CapacitacionesService capacitacionesService
@inject ObrasService obrasService

@using Proyecto.Shared
@using Proyecto.Shared.Models



<style>
    /* Estilos específicos para la página de exportación */
    .export-container {
    max-width: 1200px;
    margin: var(--spacing-xl) auto;
    padding: 0 var(--spacing-md);
    }

    .export-title {
    color: var(--primary-color);
    margin-bottom: var(--spacing-lg);
    font-size: 1.8rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    }

    .export-card {
    background-color: var(--card-bg-color);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-md);
    padding: var(--spacing-xl);
    margin-bottom: var(--spacing-lg);
    }

    .export-filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    }

    .filter-group {
    margin-bottom: var(--spacing-md);
    }

    .filter-label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--dark-text-color);
    }

    .form-select, .form-control {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    font-size: 1rem;
    transition: var(--transition-normal);
    background-color: var(--light-bg-color);
    }

    .form-select:focus, .form-control:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
    outline: none;
    background-color: var(--card-bg-color);
    }

    .export-button {
    display: flex;
    align-items: flex-end;
    }

    .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    using Proyecto.Backend.Domain.Entities.Models;
#line default
box-shadow: var(--shadow-sm);
    }

    .btn-primary {
    background-color: var(--secondary-color);
    color: white;
    }

    .btn-primary:hover {
    background-color: darken(var(--secondary-color), 8%);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    }

    .additional-filters {
    background-color: var(--light-bg-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
    color: var(--primary-color);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    }

    .filter-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    }

    .filter-item {
    margin-bottom: var(--spacing-sm);
    }

    /* Ocultar filtros específicos inicialmente */
    .usuario-filters, .evaluacion-filters {
    display: none;
    }

    /* Mostrar filtros según la selección (esto se manejaría con JS) */
    select.form-select[value="Usuarios"] ~ .additional-filters .usuario-filters {
    display: grid;
    }

    select.form-select[value="EvaluacionesDocentes"] ~ .additional-filters .evaluacion-filters {
    display: grid;
    }
</style>

<header class="navbar">
    <div class="navbar-left">
        <h3>Bienvenido</h3>
    </div>
    <nav class="navbar-right nav-links">
        <NavLink href="/inicio" class="nav-item">
            <i class="bi bi-house-fill"></i> Inicio
        </NavLink>
        <NavLink href="/promocion" class="nav-item">
            <i class="bi bi-bar-chart-line-fill"></i> Promoción
        </NavLink>
        <NavLink href="/perfil" class="nav-item">
            <i class="bi bi-person-fill"></i> Perfil
        </NavLink>
        <NavLink href="/exportar" class="nav-item active">
            <i class="bi bi-download"></i> Exportar
        </NavLink>
        <NavLink href="/" class="nav-item cerrar-sesion">
            <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
        </NavLink>
    </nav>
</header>

<div class="export-container">
    <h3 class="export-title"><i class="bi bi-download"></i> Exportar Datos</h3>

    <div class="export-card">
        <div class="export-filters">
            <!-- Selector de Tabla -->
            <div class="filter-group">
                <label class="filter-label">Tabla a Importar</label>
                <select class="form-select" @bind="tablaSeleccionada">
                    <option value="">Seleccione una tabla</option>
                    <option value="Usuarios">Usuarios</option>
                    <option value="EvaluacionesDocentes">Evaluaciones Docentes</option>
                    <option value="Capacitaciones">Capacitaciones</option>
                    <option value="Obras">Obras</option>
                    <option value="Investigaciones">Investigaciones</option>
                </select>
            </div>



            <!-- Botón de Exportación -->
            <div class="export-button">
                <button class="btn btn-primary" @onclick="ImportarDatos">
                    <i class="bi bi-download"></i> Importar
                   
                </button>
                @if (!string.IsNullOrEmpty(mensaje))
                {
                    <div class="alert alert-warning" style="margin-top: 10px;">@mensaje</div>
                }

            </div>
        </div>

        @if (mostrarInvestigaciones)
        {
            <h4>Investigaciones</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Tiempo</th>
                        <th>Fecha Inicio</th>
                        <th>Fecha Fin</th>
                        <th>PDF</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var inv in listaInvestigaciones)
                    {
                        <tr>
                            <td>@inv.NombreProyecto</td>
                            <td>@inv.TiempoMeses</td>
                            <td>@inv.FechaInicio</td>
                            <td>@inv.FechaFin</td>
                            <td>@inv.Pdf</td>

                        </tr>
                    }
                </tbody>
            </table>
        }
        @if (mostrarCapacitaciones)
{
    <h4>Capacitaciones</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Curso</th>
                <th>Duración (horas)</th>
                <th>Fecha </th>
                <th>PDF</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cap in listaCapacitaciones)
            {
                <tr>
                    <td>@cap.NombreCurso</td>
                    <td>@cap.DuracionHoras</td>
                    <td>@cap.FechaInicio</td>
                    <td>
                        @if (cap.Pdf != null)
                        {
                     <a href="#" onclick="openPdf('@Convert.ToBase64String(cap.Pdf)'); return false;" style="cursor:pointer; color:blue; text-decoration:underline;">
                    Ver PDF
            </a>

            <script>
function openPdf(base64) {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: 'application/pdf' });
    const blobUrl = URL.createObjectURL(blob);
    window.open(blobUrl);
}
</script>

                        }
                        else
                        {
                            <span>No PDF</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
<button class="btn btn-primary" @onclick="MostrarFormulario">Subir Capacitación</button>

}

@if (mostrarFormularioCapacitacion)
{
    <div class="export-card">
        <h4>Nueva Capacitación</h4>

        <EditForm Model="@nuevaCapacitacion" OnValidSubmit="GuardarCapacitacion">
            <div class="export-filters">
                <!-- Curso -->
                <div class="filter-group">
                    <label class="filter-label">Nombre del Curso</label>
                    <input type="text"
                           class="form-control"
                           @bind="nuevaCapacitacion.NombreCurso"
                           required />
                </div>

                <!-- Duración -->
                <div class="filter-group">
                    <label class="filter-label">Duración (horas)</label>
                    <input type="number"
                           class="form-control"
                           @bind="nuevaCapacitacion.DuracionHoras"
                           required />
                </div>

                <!-- Fecha (DateOnly) -->
                <div class="filter-group">
                    <label class="filter-label">Fecha de Inicio</label>
                    <input type="date"
                           class="form-control"
                           @bind-value="fechaInicio"
                           @bind-value:event="onchange"   />
                </div>

                <!-- PDF -->
                <div class="filter-group">
                    <label class="filter-label">Seleccionar PDF</label>
                    <InputFile OnChange="CargarPdf" />
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Guardar Capacitación</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(mensajeGuardar))
        {
            <div class="alert alert-info mt-2">@mensajeGuardar</div>
        }
    </div>
}


        <!--Mostrar Obras-->
        @if (mostrarObras)
{
    <h4>Obras</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Tipo de Obra</th>
                <th>Fecha</th>
                <th>PDF</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obra in listaObras)
            {
                <tr>
                    <td>@obra.TipoObra</td>
                    <td>@obra.Fecha.ToShortDateString()</td>
                    <td>
                        @if (obra.Pdf != null)
                        {
                            <a href="#" onclick="openPdf('@Convert.ToBase64String(obra.Pdf)'); return false;" style="cursor:pointer; color:blue; text-decoration:underline;">
                                Ver PDF
                            </a>
                        }
                        else
                        {
                            <span>No PDF</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="MostrarFormularioObra">Subir Obra</button>
}
@if (mostrarFormularioObra)
{
    <div class="export-card">
        <h4>Nueva Obra</h4>

        <EditForm Model="@nuevaObra" OnValidSubmit="GuardarObra">
            <div class="export-filters">
                <div class="filter-group">
                    <label class="filter-label">Tipo de Obra</label>
                    <input type="text" class="form-control" @bind="nuevaObra.TipoObra" required />
                </div>

                <div class="filter-group">
                    <label class="filter-label">Fecha</label>
                    <input type="date" class="form-control" @bind-value="fechaObra" @bind-value:event="onchange" required />
                </div>

                <div class="filter-group">
                    <label class="filter-label">Seleccionar PDF</label>
                    <InputFile OnChange="CargarPdfObra" />
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Guardar Obra</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(mensajeGuardarObra))
        {
            <div class="alert alert-info mt-2">@mensajeGuardarObra</div>
        }
    </div>
}






        <!-- Filtros Adicionales -->
        <div class="additional-filters">
            <div class="filter-section">
                <h6><i class="bi bi-funnel"></i> Filtros Adicionales</h6>

                <!-- Filtros para Usuarios -->
                <div class="filter-row usuario-filters">
                    <div class="filter-item">
                        <label class="filter-label">Tipo de Usuario</label>
                        <select class="form-select">
                            <option value="">Todos</option>
                            <option value="admin">Administradores</option>
                            <option value="docente">Docentes</option>
                        </select>
                    </div>

                    <div class="filter-item">
                        <label class="filter-label">Fecha Desde</label>
                        <input type="date" class="form-control">
                    </div>

                    <div class="filter-item">
                        <label class="filter-label">Fecha Hasta</label>
                        <input type="date" class="form-control">
                    </div>
                </div>

                <!-- Filtros para Evaluaciones -->
                <div class="filter-row evaluacion-filters">
                    <div class="filter-item">
                        <label class="filter-label">Período</label>
                        <input type="text" class="form-control" placeholder="Ej: 2023-1">
                    </div>

                    <div class="filter-item">
                        <label class="filter-label">Puntaje Mínimo</label>
                        <input type="number" step="0.01" class="form-control">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<footer class="footer">
    <div class="footer-info">
        <div class="footer-section">
            <h4><i class="bi bi-info-circle-fill"></i> Sobre Nosotros</h4>
            <p>Sistema de Promoción para Docentes de la FISEI.<br>Para agilizar trámites.</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-envelope-fill"></i> Contactos</h4>
            <p>support@correo.com<br>+593 99 234 56789</p>
        </div>
        <div class="footer-section">
            <h4><i class="bi bi-link-45deg"></i> Enlaces Rápidos</h4>
            <NavLink href="/inicio"><i class="bi bi-house-fill"></i> Inicio</NavLink><br />
            <NavLink href="/promocion"><i class="bi bi-bar-chart-line-fill"></i> Promoción</NavLink><br />
            <NavLink href="/exportar"><i class="bi bi-backpack4"></i>Exportar Datos</NavLink><br />
            <NavLink href="/perfil"><i class="bi bi-person-fill"></i> Perfil</NavLink>
        </div>
    </div>
    <p class="copyright">© 2025 Sistema de Promoción, Todos los Derechos Reservados</p>
</footer>

@code {
    private List<Investigacion> listaInvestigaciones = new();
    private bool mostrarInvestigaciones = false;
    private string tablaSeleccionada = "";
    private string mensaje = " ";
    private List<Capacitacione> listaCapacitaciones = new();
    private bool mostrarCapacitaciones = false;
    private bool mostrarFormularioCapacitacion = false;
    <!--Obras-->
    private List<Obra> listaObras = new();
    private bool mostrarObras = false;
    private bool mostrarFormularioObra = false;
    private Obra nuevaObra = new();
    private DateOnly? fechaObra;
    private IBrowserFile? archivoPdfObra;
    private string mensajeGuardarObra = "";


    // -- NUEVO --
    private DateOnly? fechaInicio;        // << ahora es DateOnly?
    private IBrowserFile? archivoPdf;

    private string mensajeGuardar = "";
    private Capacitacione nuevaCapacitacion = new();

    [Inject] private HttpClient http { get; set; } = default!;

 private void MostrarFormulario()
    {
        mostrarFormularioCapacitacion = true;
        mensajeGuardar = "";
        _ = CargarCedulaDesdeLocalStorage();   // auto-carga cédula
    }

    private async Task MostrarFormularioObra()
{
    mostrarFormularioObra = true;
    mensajeGuardarObra = "";
    await CargarCedulaDesdeLocalStorageObra();
}


  private async Task CargarPdf(InputFileChangeEventArgs e)
    {
        archivoPdf = e.File;
    }

    private async Task CargarPdfObra(InputFileChangeEventArgs e)
{
    archivoPdfObra = e.File;
}


 private async Task GuardarCapacitacion()
    {
        try
        {
            // --- PDF a byte[] ---
            if (archivoPdf is not null)
            {
                var buffer = new byte[archivoPdf.Size];
                await archivoPdf.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)
                                .ReadAsync(buffer);
                nuevaCapacitacion.Pdf = buffer;
            }

            // --- Fecha ---
            if (fechaInicio is null)
            {
                mensajeGuardar = "Selecciona la fecha de inicio.";
                return;
            }
            nuevaCapacitacion.FechaInicio = fechaInicio.Value;

            // --- POST al API ---
            var resp = await http.PostAsJsonAsync("api/capacitaciones/guardar", nuevaCapacitacion);

            if (resp.IsSuccessStatusCode)
            {
                mensajeGuardar = "Capacitación guardada correctamente.";
                mostrarFormularioCapacitacion = false;
                nuevaCapacitacion = new();      // limpia
                fechaInicio = null;
                archivoPdf = null;
                await ImportarDatos();          // refresca la tabla
            }
            else
            {
                mensajeGuardar = $"Error ({(int)resp.StatusCode}): no se pudo guardar.";
            }
        }
        catch (Exception ex)
        {
            mensajeGuardar = $"Error: {ex.Message}";
        }
    }

    private async Task GuardarObra()
{
    try
    {
        if (archivoPdfObra is not null)
        {
            var buffer = new byte[archivoPdfObra.Size];
            await archivoPdfObra.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
            nuevaObra.Pdf = buffer;
        }

        if (fechaObra is null)
        {
            mensajeGuardarObra = "Selecciona la fecha de la obra.";
            return;
        }

        nuevaObra.Fecha = fechaObra.Value;

        var resp = await http.PostAsJsonAsync("api/obras/guardar", nuevaObra);

        if (resp.IsSuccessStatusCode)
        {
            mensajeGuardarObra = "Obra guardada correctamente.";
            mostrarFormularioObra = false;
            nuevaObra = new();
            fechaObra = null;
            archivoPdfObra = null;
            await ImportarDatos(); // actualiza la tabla
        }
        else
        {
            mensajeGuardarObra = $"Error ({(int)resp.StatusCode}): no se pudo guardar.";
        }
    }
    catch (Exception ex)
    {
        mensajeGuardarObra = $"Error: {ex.Message}";
    }
}

    private async Task CargarCedulaDesdeLocalStorageObra()
{
    var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
    if (!string.IsNullOrWhiteSpace(cedula))
    {
        nuevaObra.Cedula = cedula;
    }
}



    private async Task ImportarDatos()


    {
        mensaje = "";

        if (string.IsNullOrEmpty(tablaSeleccionada))
        {
            mensaje = "Por favor seleccione una tabla antes de importar.";
            return;
        }

        if (tablaSeleccionada == "Investigaciones")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (!string.IsNullOrEmpty(cedula))
            {
                listaInvestigaciones = await investigacionService.ObtenerPorCedulaAsync(cedula);
                mostrarInvestigaciones = true;
            }
        }
        else
        {
            mostrarInvestigaciones = false; // Ocultar si no es investigaciones
        }
        if (tablaSeleccionada == "Capacitaciones")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (!string.IsNullOrEmpty(cedula))
            {
                listaCapacitaciones = await capacitacionesService.ObtenerPorCedulaAsync(cedula);
                mostrarCapacitaciones = true;
            }
        }
        else
        {
            mostrarCapacitaciones = false;
        }
    <!--Obras-->
        if (tablaSeleccionada == "Obras")
        {
            var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");

            if (!string.IsNullOrEmpty(cedula))
            {
                listaObras = await http.GetFromJsonAsync<List<Obra>>($"api/obras/buscar/{cedula}");
                mostrarObras = true;
            }
        }
        else
        {
            mostrarObras = false;
        }


    }

   private async Task CargarCedulaDesdeLocalStorage()
    {
        var cedula = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
        if (!string.IsNullOrWhiteSpace(cedula))
        {
            nuevaCapacitacion.Cedula = cedula;
        }
    }
}
