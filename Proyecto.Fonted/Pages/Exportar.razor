@page "/exportar"
@using Proyecto.Fonted.Services
@using Proyecto.Frontend.Services
@using Proyecto.Shared.Models
@inject IJSRuntime JS
@inject InvestigacionService investigacionService
@inject CarreraService carreraService
@inject ObraService obraService

<style>
    /* Estilos específicos para la página de exportación */
    .export-container {
        max-width: 1200px;
        margin: var(--spacing-xl) auto;
        padding: 0 var(--spacing-md);
    }

    .export-title {
        color: var(--primary-color);
        margin-bottom: var(--spacing-lg);
        font-size: 1.8rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
    }

    .export-card {
        background-color: var(--card-bg-color);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        padding: var(--spacing-xl);
        margin-bottom: var(--spacing-lg);
    }

    .export-filters {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: var(--spacing-lg);
        margin-bottom: var(--spacing-lg);
    }

    .filter-group {
        margin-bottom: var(--spacing-md);
    }

    .filter-label {
        display: block;
        margin-bottom: var(--spacing-xs);
        font-weight: 500;
        color: var(--dark-text-color);
    }

    .form-select, .form-control {
        width: 100%;
        padding: var(--spacing-sm) var(--spacing-md);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        font-size: 1rem;
        transition: var(--transition-normal);
        background-color: var(--light-bg-color);
    }

        .form-select:focus, .form-control:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
            outline: none;
            background-color: var(--card-bg-color);
        }

    .export-button {
        display: flex;
        align-items: flex-end;
    }

    .btn {
        padding: var(--spacing-sm) var(--spacing-md);
        border: none;
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        transition: var(--transition-normal);
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-xs);
        text-decoration: none;
        box-shadow: var(--shadow-sm);
    }

    .btn-primary {
        background-color: var(--secondary-color);
        color: white;
    }

        .btn-primary:hover {
            background-color: darken(var(--secondary-color), 8%);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .additional-filters {
        background-color: var(--light-bg-color);
        border-radius: var(--border-radius-md);
        padding: var(--spacing-md);
        margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
        color: var(--primary-color);
        margin-bottom: var(--spacing-md);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-md);
    }

    .filter-item {
        margin-bottom: var(--spacing-sm);
    }

    /* Ocultar filtros específicos inicialmente */
    .usuario-filters, .evaluacion-filters {
        display: none;
    }

    /* Mostrar filtros según la selección (esto se manejaría con JS) */
    select.form-select[value="Usuarios"] ~ .additional-filters .usuario-filters {
        display: grid;
    }

    select.form-select[value="EvaluacionesDocentes"] ~ .additional-filters .evaluacion-filters {
        display: grid;
    }
</style>

<h3>Exportar Datos</h3>

<div class="mb-3">
    <label>Tabla:</label>
    <select @bind="tablaSeleccionada" class="form-select d-inline-block w-auto">
        <option value="">-- seleccione --</option>
        <option value="Investigaciones">Investigaciones</option>
        <option value="Obras">Obras</option>
    </select>

    <button class="btn btn-primary ms-2" @onclick="AbrirModalImportar" disabled="@string.IsNullOrEmpty(tablaSeleccionada)">
        Importar
    </button>
    <button class="btn btn-secondary ms-2" @onclick="AbrirModalAgregar" disabled="@string.IsNullOrEmpty(tablaSeleccionada)">
        Agregar
    </button>
</div>

@if (!string.IsNullOrEmpty(mensaje)) <div class="alert alert-warning">@mensaje</div>;

@if (mostrarRegistros)
{
    <h5>@tablaSeleccionada</h5>
    <table class="table table-striped">
        <thead>
            <tr>
                @if(tablaSeleccionada=="Investigaciones"){
                    <th>Título</th><th>Tiempo</th><th>Fechas</th><th>PDF</th>
                } else {
                    <th>Tipo</th><th>Fecha</th><th>PDF</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach(var reg in registros)
            {
                <tr @key="GetKey(reg)">
                    @if(tablaSeleccionada=="Investigaciones"){
                        var inv = (Investigacion)reg;
                        <td>@inv.NombreProyecto</td>
                        <td>@inv.TiempoMeses</td>
                        <td>@inv.FechaInicio:yyyy-MM-dd – @inv.FechaFin?.ToString("yyyy-MM-dd")</td>
                        <td>@(inv.Pdf?.Length>0
                                ? <a href="#" @onclick="() => VerPdf(inv.Pdf)">Ver PDF</a>
                                : "<i>sin pdf</i>")</td>
                    } else {
                        var ob = (Obra)reg;
                        <td>@ob.TipoObra</td>
                        <td>@ob.Fecha:yyyy-MM-dd</td>
                        <td>@(ob.Pdf?.Length>0
                                ? <a href="#" @onclick="() => VerPdf(ob.Pdf)">Ver PDF</a>
                                : "<i>sin pdf</i>")</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal Importar -->
<div class="modal fade" tabindex="-1" id="modalImportar">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><h5>Importar @tablaSeleccionada</h5><button class="btn-close" @onclick="CerrarModalImportar"></button></div>
      <div class="modal-body">
        <p>¿Desea cargar los registros?</p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" @onclick="CerrarModalImportar">Cancelar</button>
        <button class="btn btn-primary" @onclick="ConfirmarImportar">Cargar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Agregar -->
<div class="modal fade" tabindex="-1" id="modalAgregar">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><h5>Agregar @tablaSeleccionada</h5><button class="btn-close" @onclick="CerrarModalAgregar"></button></div>
      <div class="modal-body">
        @if(tablaSeleccionada=="Investigaciones"){
            <EditForm Model="modeloNuevoInv" OnValidSubmit="GuardarInvestigacion">
                <InputText @bind-Value="modeloNuevoInv.NombreProyecto" placeholder="Título" class="form-control mb-2"/>
                <InputDate @bind-Value="modeloNuevoInv.FechaInicio" @onchange="_=>CalcularTiempoInv()" class="form-control mb-2"/>
                <InputDate @bind-Value="modeloNuevoInv.FechaFin" @onchange="_=>CalcularTiempoInv()" class="form-control mb-2"/>
                <InputFile OnChange="e=>PdfNuevoInv=e.File" class="form-control"/>
            </EditForm>
        } else {
            <EditForm Model="modeloNuevaObra" OnValidSubmit="GuardarObra">
                <InputText @bind-Value="modeloNuevaObra.TipoObra" placeholder="Tipo de obra" class="form-control mb-2"/>
                <InputDate @bind-Value="modeloNuevaObra.Fecha" class="form-control mb-2"/>
                <InputFile OnChange="e=>PdfNuevaObra=e.File" class="form-control"/>
            </EditForm>
        }
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" @onclick="CerrarModalAgregar">Cancelar</button>
        <button class="btn btn-primary" @onclick="SaveNuevoRegistro">Guardar</button>
      </div>
    </div>
  </div>
</div>

@code {
    private string tablaSeleccionada = "";
    private string mensaje = "";
    private bool mostrarRegistros = false;
    private List<object> registros = new();

    private Investigacion modeloNuevoInv = new();
    private IBrowserFile? PdfNuevoInv;

    private Obra modeloNuevaObra = new();
    private IBrowserFile? PdfNuevaObra;

    private void GetKey(object r) => r is Investigacion inv ? inv.IdInv : ((Obra)r).IdObra.ToString();

    private async Task AbrirModalImportar() => await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#modalImportar").InvokeVoidAsync("show");
    private async Task CerrarModalImportar() => await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#modalImportar").InvokeVoidAsync("hide");
    private async Task AbrirModalAgregar() => await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#modalAgregar").InvokeVoidAsync("show");
    private async Task CerrarModalAgregar() => await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#modalAgregar").InvokeVoidAsync("hide");

    private async Task ConfirmarImportar() {
        await CerrarModalImportar();
        await CargarRegistros();
    }

    private async Task CargarRegistros() {
        mostrarRegistros = true;
        registros.Clear();
        if (tablaSeleccionada=="Investigaciones") {
            var ced = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            registros.AddRange(await investigacionService.ObtenerPorCedulaAsync(ced));
        } else {
            var ced = await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
            registros.AddRange(await obraService.ObtenerPorCedulaAsync(ced));
        }
    }

    private async Task SaveNuevoRegistro() {
        if (tablaSeleccionada=="Investigaciones") await GuardarInvestigacion();
        else await GuardarObra();
        await CerrarModalAgregar();
        await CargarRegistros();
    }

    private async Task GuardarInvestigacion() {
        if (PdfNuevoInv!=null) {
            using var ms=new MemoryStream(); await PdfNuevoInv.OpenReadStream(10*1024*1024).CopyToAsync(ms);
            modeloNuevoInv.Pdf=ms.ToArray();
        }
        modeloNuevoInv.Cedula=await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
        modeloNuevoInv.TiempoMeses = 0;
        await investigacionService.GuardarInvestigacionAsync(modeloNuevoInv);
        mensaje="Investigación guardada";
        modeloNuevoInv=new();
        PdfNuevoInv=null;
    }

    private async Task GuardarObra() {
        if (PdfNuevaObra!=null) {
            using var ms=new MemoryStream(); await PdfNuevaObra.OpenReadStream(10*1024*1024).CopyToAsync(ms);
            modeloNuevaObra.Pdf=ms.ToArray();
        }
        modeloNuevaObra.Cedula=await JS.InvokeAsync<string>("localStorage.getItem", "cedulaUsuario");
        await obraService.GuardarObraAsync(modeloNuevaObra);
        mensaje="Obra guardada";
        modeloNuevaObra=new();
        PdfNuevaObra=null;
    }

    private void CalcularTiempoInv()
    {
        if (modeloNuevoInv.FechaInicio!=default && modeloNuevoInv.FechaFin.HasValue) {
            var ini = modeloNuevoInv.FechaInicio; var fin = modeloNuevoInv.FechaFin.Value;
            int meses = ((fin.Year-ini.Year)*12)+(fin.Month-ini.Month)+(fin.Day>=ini.Day?1:0);
            modeloNuevoInv.TiempoMeses=meses;
        }
    }

    private void VerPdf(byte[]? pdf)
    {
        var base64=Convert.ToBase64String(pdf!);
        JS.InvokeVoidAsync("window.open", $"data:application/pdf;base64,{base64}", "_blank");
    }
}
