@page "/exportar"
@using Proyecto.Frontend.Services
@using Proyecto.Fonted.Services
@using Proyecto.Shared.Models
@inject IJSRuntime JS
@inject InvestigacionService InvestigacionService
@inject CapacitacionesService CapacitacionesService
@inject CarreraService CarreraService

<!-- ========================= ⬇️  CSS  ⬇️ ========================= -->
<style>
    /* Estilos específicos para la página de exportación */
    .export-container {
    max-width: 1200px;
    margin: var(--spacing-xl) auto;
    padding: 0 var(--spacing-md);
    }

    .export-title {
    color: var(--primary-color);
    margin-bottom: var(--spacing-lg);
    font-size: 1.8rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    }

    .export-card {
    background-color: var(--card-bg-color);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-md);
    padding: var(--spacing-xl);
    margin-bottom: var(--spacing-lg);
    }

    .export-filters {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    }

    .filter-group {
    margin-bottom: var(--spacing-md);
    }

    .filter-label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--dark-text-color);
    }

    .form-select, .form-control {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    font-size: 1rem;
    transition: var(--transition-normal);
    background-color: var(--light-bg-color);
    }

    .form-select:focus, .form-control:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
    outline: none;
    background-color: var(--card-bg-color);
    }

    .export-button {
    display: flex;
    align-items: flex-end;
    }

    .btn {
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    text-decoration: none;
    box-shadow: var(--shadow-sm);
    }

    .btn-primary {
    background-color: var(--secondary-color);
    color: white;
    }

    .btn-primary:hover {
    background-color: darken(var(--secondary-color), 8%);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    }

    .additional-filters {
    background-color: var(--light-bg-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
    color: var(--primary-color);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    }

    .filter-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    }

    .filter-item {
    margin-bottom: var(--spacing-sm);
        max-width: 1200px;
        margin: var(--spacing-xl) auto;
        padding: 0 var(--spacing-md);
    }

    .export-title {
        color: var(--primary-color);
        margin-bottom: var(--spacing-lg);
        font-size: 1.8rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: var(--spacing-sm);
    }

    .export-card {
        background-color: var(--card-bg-color);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
        padding: var(--spacing-xl);
        margin-bottom: var(--spacing-lg);
    }

    .export-filters {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: var(--spacing-lg);
        margin-bottom: var(--spacing-lg);
    }

    .filter-group {
        margin-bottom: var(--spacing-md);
    }

    .filter-label {
        display: block;
        margin-bottom: var(--spacing-xs);
        font-weight: 500;
        color: var(--dark-text-color);
    }

    .form-select, .form-control {
        width: 100%;
        padding: var(--spacing-sm) var(--spacing-md);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-md);
        font-size: 1rem;
        transition: var(--transition-normal);
        background-color: var(--light-bg-color);
    }

        .form-select:focus, .form-control:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 4px rgba(41, 128, 185, 0.2);
            outline: none;
            background-color: var(--card-bg-color);
        }

    .export-button {
        display: flex;
        align-items: flex-end;
    }

    .btn {
        padding: var(--spacing-sm) var(--spacing-md);
        border: none;
        border-radius: var(--border-radius-md);
        cursor: pointer;
        font-size: 1rem;
        font-weight: 600;
        transition: var(--transition-normal);
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-xs);
        text-decoration: none;
        box-shadow: var(--shadow-sm);
    }

    .btn-primary {
        background-color: var(--secondary-color);
        color: white;
    }

        .btn-primary:hover {
            background-color: darken(var(--secondary-color), 8%);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

    .additional-filters {
        background-color: var(--light-bg-color);
        border-radius: var(--border-radius-md);
        padding: var(--spacing-md);
        margin-top: var(--spacing-lg);
    }

    .filter-section h6 {
        color: var(--primary-color);
        margin-bottom: var(--spacing-md);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-md);
    }

    .filter-item {
        margin-bottom: var(--spacing-sm);
    }

    /* Ocultar filtros específicos inicialmente */
    .usuario-filters, .evaluacion-filters {

    display: none;

    }

    /* Mostrar filtros según la selección (esto se manejaría con JS) */
    select.form-select[value="Usuarios"] ~ .additional-filters .usuario-filters {

        display: grid;
    }

    select.form-select[value="EvaluacionesDocentes"] ~ .additional-filters .evaluacion-filters {
        display: grid;
    }
</style>


<!-- ========================= ⬇️  NAVBAR  ⬇️ ========================= -->
<header class="navbar"> … (mantuve tu mismo markup) … </header>

<!-- ========================= ⬇️  MAIN  ⬇️ ========================= -->
<div class="export-container">
    <h3 class="export-title"><i class="bi bi-download"></i> Exportar Datos</h3>

    <div class="export-card">
        <!-- ─── Filtros superiores ─────────────────────────────── -->
        <div class="export-filters">
            <div class="filter-group">
                <label class="filter-label">Tabla a Exportar / Importar</label>
                <select class="form-select" @bind="TablaSeleccionada">
                    <option value="">Seleccione una tabla</option>
                    <option value="Investigaciones">Investigaciones</option>
                    <option value="Capacitaciones">Capacitaciones</option>
                </select>
            </div>

            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert alert-warning mt-2">@Mensaje</div>
            }

            <div class="export-button">
                <button class="btn btn-primary" @onclick="ImportarDatos">
                    <i class="bi bi-download"></i> Importar
                </button>
            </div>
        </div>

        <!-- ─── FORMULARIO INVESTIGACIÓN ───────────────────────── -->
        @if (MostrarFormularioInvestigacion)
        {
            <EditForm Model="@NuevaInvestigacion" OnValidSubmit="GuardarInvestigacion">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row mb-2">
                    <div class="col">
                        <label>Título del Proyecto</label>
                        <InputText class="form-control" @bind-Value="NuevaInvestigacion.NombreProyecto" />
                    </div>
                    <div class="col">
                        <label>Carrera</label>
                        <select class="form-select" @bind="NuevaInvestigacion.IdCarrera">
                            <option value="">-- carrera --</option>
                            @foreach (var c in ListaCarreras)
                            {
                                <option value="@c.IdCarrera">@c.Nombre</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col">
                        <label>Fecha Inicio</label>
                        <InputDate class="form-control" @bind-Value="NuevaInvestigacion.FechaInicio" @onchange="CalcularMeses" />
                    </div>
                    <div class="col">
                        <label>Fecha Fin</label>
                        <InputDate class="form-control" @bind-Value="NuevaInvestigacion.FechaFin" @onchange="CalcularMeses" />
                    </div>
                    <div class="col">
                        <label>Duración (meses)</label>
                        <InputNumber class="form-control" @bind-Value="NuevaInvestigacion.TiempoMeses" />
                    </div>
                </div>

                <div class="mb-3">
                    <label>PDF</label>
                    <InputFile OnChange="SubirPdfInvestigacion" />
                </div>

                <button type="submit" class="btn btn-primary"><i class="bi bi-check"></i> Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="() => MostrarFormularioInvestigacion=false"><i class="bi bi-x"></i> Cancelar</button>
            </EditForm>
        }

        <!-- ─── TABLA INVESTIGACIONES ─────────────────────────── -->
        @if (MostrarInvestigaciones)
        {
            <button class="btn btn-success mb-2" @onclick="() => MostrarFormularioInvestigacion=true"><i class="bi bi-plus-circle"></i> Agregar Investigación</button>
            <h4>Investigaciones</h4>
            <table class="table">
                <thead> <tr><th>Título</th><th>Meses</th><th>Inicio</th><th>Fin</th><th>Carrera</th><th>PDF</th><th></th></tr></thead>
                <tbody>
                    @foreach (var inv in ListaInvestigaciones)
                    {
                        <tr>
                            <td>@inv.NombreProyecto</td>
                            <td>@inv.TiempoMeses</td>
                            <td>@inv.FechaInicio:yyyy-MM-dd</td>
                            <td>@inv.FechaFin:yyyy-MM-dd</td>
                            <td>@inv.NombreCarrera</td>
                            <td>
                                @if (inv.Pdf?.Length>0)
                                {<a href="#" @onclick="() => AbrirPdf(inv.Pdf)">Ver PDF</a>}
                                else {<span class="text-muted">Sin PDF</span>}
                            </td>
                            <td><button class="btn btn-warning btn-sm" @onclick="() => EditarInvestigacion(inv)"><i class="bi bi-pencil"></i></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <!-- ─── FORMULARIO CAPACITACIÓN ───────────────────────── -->
        @if (MostrarFormularioCapacitacion)
        {
            <EditForm Model="@NuevaCapacitacion" OnValidSubmit="GuardarCapacitacion">
                <div class="export-filters">
                    <div class="filter-group"><label>Nombre del Curso</label><InputText class="form-control" @bind-Value="NuevaCapacitacion.NombreCurso" /></div>
                    <div class="filter-group"><label>Duración (horas)</label><InputNumber class="form-control" @bind-Value="NuevaCapacitacion.DuracionHoras" /></div>
                    <div class="filter-group"><label>Fecha Inicio</label><InputDate class="form-control" @bind-Value="FechaInicioCap" /></div>
                    <div class="filter-group"><label>PDF</label><InputFile OnChange="CargarPdfCap" /></div>
                </div>
                <button type="submit" class="btn btn-primary">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="() => MostrarFormularioCapacitacion=false">Cancelar</button>
            </EditForm>
            @if(!string.IsNullOrEmpty(MensajeGuardarCap))
            {<div class="alert alert-info mt-2">@MensajeGuardarCap</div>}
        }

        <!-- ─── TABLA CAPACITACIONES ───────────────────────────-->
        @if (MostrarCapacitaciones)
        {
            <button class="btn btn-success mb-2" @onclick="() => MostrarFormularioCapacitacion=true"><i class="bi bi-plus-circle"></i> Agregar Capacitación</button>
            <h4>Capacitaciones</h4>
            <table class="table">
                <thead><tr><th>Curso</th><th>Horas</th><th>Fecha</th><th>PDF</th></tr></thead>
                <tbody>
                    @foreach (var cap in ListaCapacitaciones)
                    {
                        <tr>
                            <td>@cap.NombreCurso</td><td>@cap.DuracionHoras</td><td>@cap.FechaInicio:yyyy-MM-dd</td>
                            <td>
                                @if(cap.Pdf?.Length>0){<a href="#" @onclick="() => AbrirPdf(cap.Pdf)">Ver PDF</a>} else {<span class="text-muted">Sin PDF</span>}
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<!-- ========================= ⬇️  FOOTER  ⬇️ ========================= -->
<footer class="footer"> … (igual al tuyo) … </footer>

<script>
function openPdf(base64){ /* … tu misma función … */ }
</script>

<!-- ========================= ⬇️  C# CODE  ⬇️ ========================= -->
@code {
    // ╭───── ENUM para la tabla seleccionada ─────╮
    private string TablaSeleccionada { get; set; } = string.Empty;

    // ╭───── INVESTIGACIONES ─────╮
    private List<Investigacion> ListaInvestigaciones = new();
    private Investigacion NuevaInvestigacion = new();
    private bool MostrarInvestigaciones;
    private bool MostrarFormularioInvestigacion;
    private IBrowserFile? PdfInvestigacion;
    private List<Carrera> ListaCarreras = new();

    // ╭───── CAPACITACIONES ─────╮
    private List<Capacitacione> ListaCapacitaciones = new();
    private Capacitacione NuevaCapacitacion = new();
    private bool MostrarCapacitaciones;
    private bool MostrarFormularioCapacitacion;
    private IBrowserFile? PdfCapacitacion;
    private DateTime? FechaInicioCap;

    // Mensajes
    private string Mensaje="";
    private string MensajeGuardarCap="";

    protected override async Task OnInitializedAsync()
    {
        ListaCarreras = await CarreraService.ObtenerCarrerasAsync();
    }

    // ───── IMPORTAR ───────────────────────────
    private async Task ImportarDatos()
    {
        Mensaje="";
        var ced = await JS.InvokeAsync<string>("localStorage.getItem","cedulaUsuario");
        if(string.IsNullOrEmpty(TablaSeleccionada)){ Mensaje="Seleccione una tabla"; return; }

        if(TablaSeleccionada=="Investigaciones")
        {
            ListaInvestigaciones = await InvestigacionService.ObtenerPorCedulaAsync(ced);
            MostrarInvestigaciones=true; MostrarCapacitaciones=false;
        }
        else if(TablaSeleccionada=="Capacitaciones")
        {
            ListaCapacitaciones = await CapacitacionesService.ObtenerPorCedulaAsync(ced);
            MostrarCapacitaciones=true; MostrarInvestigaciones=false;
        }
    }

    // ───── PDF helpers ─────────────────────────
    private async Task AbrirPdf(byte[] pdf)
        => await JS.InvokeVoidAsync("openPdf", Convert.ToBase64String(pdf));

    private async Task SubirPdfInvestigacion(InputFileChangeEventArgs e) => PdfInvestigacion=e.File;

    private async Task CargarPdfCap(InputFileChangeEventArgs e) => PdfCapacitacion=e.File;

    // ───── Invest: Guardar/Editar ──────────────
    private async Task GuardarInvestigacion()
    {
        try
        {
            NuevaInvestigacion.Cedula = await JS.InvokeAsync<string>("localStorage.getItem","cedulaUsuario");
            if(PdfInvestigacion!=null){ using var ms=new MemoryStream(); await PdfInvestigacion.OpenReadStream(10*1024*1024).CopyToAsync(ms); NuevaInvestigacion.Pdf=ms.ToArray(); }
            if(NuevaInvestigacion.IdInv==0)
                NuevaInvestigacion = await InvestigacionService.GuardarInvestigacionAsync(NuevaInvestigacion);
            else
                await InvestigacionService.ActualizarInvestigacionAsync(NuevaInvestigacion);

            ListaInvestigaciones = await InvestigacionService.ObtenerPorCedulaAsync(NuevaInvestigacion.Cedula);
            MostrarFormularioInvestigacion=false; PdfInvestigacion=null;
        }
        catch(Exception ex){ Mensaje=$"Error al guardar la investigación: {ex.Message}"; }
    }

    private void EditarInvestigacion(Investigacion inv){ NuevaInvestigacion = inv with {}; MostrarFormularioInvestigacion=true; }

    private void CalcularMeses(ChangeEventArgs _=null)
    {
        if(NuevaInvestigacion.FechaFin.HasValue && NuevaInvestigacion.FechaInicio!=default)
        {
            var ini = NuevaInvestigacion.FechaInicio; var fin=NuevaInvestigacion.FechaFin.Value;
            if(fin>=ini){ NuevaInvestigacion.TiempoMeses = ((fin.Year-ini.Year)*12)+(fin.Month-ini.Month)+(fin.Day>=ini.Day?1:0); }
        }
    }

    // ───── Capacitaciones: Guardar ─────────────
    private async Task GuardarCapacitacion()
    {
        MensajeGuardarCap="";
        NuevaCapacitacion.Cedula = await JS.InvokeAsync<string>("localStorage.getItem","cedulaUsuario");
        if(FechaInicioCap is null){ MensajeGuardarCap="Seleccione fecha"; return; }
        NuevaCapacitacion.FechaInicio = DateOnly.FromDateTime(FechaInicioCap.Value);
        if(PdfCapacitacion!=null){ using var ms=new MemoryStream(); await PdfCapacitacion.OpenReadStream(10*1024*1024).CopyToAsync(ms); NuevaCapacitacion.Pdf=ms.ToArray(); }

        var resp = await CapacitacionesService.GuardarAsync(NuevaCapacitacion);
        if(resp.IsSuccessStatusCode)
        {
            MostrarFormularioCapacitacion=false; FechaInicioCap=null; PdfCapacitacion=null; NuevaCapacitacion=new();
            ListaCapacitaciones = await CapacitacionesService.ObtenerPorCedulaAsync(NuevaCapacitacion.Cedula);
        }
        else
        {
            MensajeGuardarCap=$"Error {(int)resp.StatusCode}: {await resp.Content.ReadAsStringAsync()}";
        }
    }
}
